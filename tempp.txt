----------------------********************-----------------------*********************-----------------
main.py==>  args:  {'numIters': 1, 'numEps': 2, 'tempThreshold': 8, 'updateThreshold': 0.6, 'maxlenOfQueue': 200000, 'numMCTSSims': 15, 'arenaCompare': 40, 'cpuct': 1, 'checkpoint': './temp/', 'load_model': False, 'load_folder_file': ('/dev/models/8x100x50', 'best.pth.tar'), 'numItersForTrainExamplesHistory': 20}
------ITER 1------
Coach.py==>learn  self.skipFirstSelfPlay:  False
Coach.py ==>executeEpisode
chessboard chess-pgn object:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R
-----------************----------
Coach.py ==>executeEpisode  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R self.curPlayer:  1
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R player:  1
Coach.py ==>executeEpisode  canonicalBoard:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13c630ff60>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  6 0 7 2  at:  3130
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  7 1 7 2  at:  3706
count:  5
inserting:  6 1 6 2  at:  3186
count:  6
inserting:  5 1 5 2  at:  2666
count:  7
inserting:  4 1 4 2  at:  2146
count:  8
inserting:  3 1 3 2  at:  1626
count:  9
inserting:  2 1 2 2  at:  1106
count:  10
inserting:  1 1 1 2  at:  586
count:  11
inserting:  0 1 0 2  at:  66
count:  12
inserting:  7 1 7 3  at:  3707
count:  13
inserting:  6 1 6 3  at:  3187
count:  14
inserting:  5 1 5 3  at:  2667
count:  15
inserting:  4 1 4 3  at:  2147
count:  16
inserting:  3 1 3 3  at:  1627
count:  17
inserting:  2 1 2 3  at:  1107
count:  18
inserting:  1 1 1 3  at:  587
count:  19
inserting:  0 1 0 3  at:  67
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00918867]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  66
ChessGame==>getNextState  param action number:  66 self.n*self.n:  64
selected action:  0 1 0 2
MOVE:  a2a3
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  a2a3
MOOOVOVOEOEaaaa:  16
position:  a2a3
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
P . . . . . . .
. P P P P P P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
P . . . . . . .
. P P P P P P P
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  66 next_s:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
P . . . . . . .
. P P P P P P P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
P . . . . . . .
. P P P P P P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
P . . . . . . .
. P P P P P P P
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880822e8>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  7 6 7 5  at:  4029
count:  5
inserting:  6 6 6 5  at:  3509
count:  6
inserting:  5 6 5 5  at:  2989
count:  7
inserting:  4 6 4 5  at:  2469
count:  8
inserting:  3 6 3 5  at:  1949
count:  9
inserting:  2 6 2 5  at:  1429
count:  10
inserting:  1 6 1 5  at:  909
count:  11
inserting:  0 6 0 5  at:  389
count:  12
inserting:  7 6 7 4  at:  4028
count:  13
inserting:  6 6 6 4  at:  3508
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
inserting:  0 6 0 4  at:  388
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00874082]
MCTS.py==>search  returning value of canonical board -v:  [0.00874082]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  1106
ChessGame==>getNextState  param action number:  1106 self.n*self.n:  64
selected action:  2 1 2 2
MOVE:  c2c3
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  c2c3
MOOOVOVOEOEaaaa:  18
position:  c2c3
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . P . . . . .
P P . P P P P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . P . . . . .
P P . P P P P P
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  1106 next_s:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . P . . . . .
P P . P P P P P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  0  1  1  1  1  1  0  0  1  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . P . . . . .
P P . P P P P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . P . . . . .
P P . P P P P P
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13886aaf28>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  7 6 7 5  at:  4029
count:  5
inserting:  6 6 6 5  at:  3509
count:  6
inserting:  5 6 5 5  at:  2989
count:  7
inserting:  4 6 4 5  at:  2469
count:  8
inserting:  3 6 3 5  at:  1949
count:  9
inserting:  2 6 2 5  at:  1429
count:  10
inserting:  1 6 1 5  at:  909
count:  11
inserting:  0 6 0 5  at:  389
count:  12
inserting:  7 6 7 4  at:  4028
count:  13
inserting:  6 6 6 4  at:  3508
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
inserting:  0 6 0 4  at:  388
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00864429]
MCTS.py==>search  returning value of canonical board -v:  [0.00864429]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  67
ChessGame==>getNextState  param action number:  67 self.n*self.n:  64
selected action:  0 1 0 3
MOVE:  a2a4
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  a2a4
MOOOVOVOEOEaaaa:  24
position:  a2a4
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
P . . . . . . .
. . . . . . . .
. P P P P P P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
P . . . . . . .
. . . . . . . .
. P P P P P P P
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  67 next_s:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
P . . . . . . .
. . . . . . . .
. P P P P P P P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
P . . . . . . .
. . . . . . . .
. P P P P P P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
P . . . . . . .
. . . . . . . .
. P P P P P P P
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880edf60>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  7 6 7 5  at:  4029
count:  5
inserting:  6 6 6 5  at:  3509
count:  6
inserting:  5 6 5 5  at:  2989
count:  7
inserting:  4 6 4 5  at:  2469
count:  8
inserting:  3 6 3 5  at:  1949
count:  9
inserting:  2 6 2 5  at:  1429
count:  10
inserting:  1 6 1 5  at:  909
count:  11
inserting:  0 6 0 5  at:  389
count:  12
inserting:  7 6 7 4  at:  4028
count:  13
inserting:  6 6 6 4  at:  3508
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
inserting:  0 6 0 4  at:  388
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00937483]
MCTS.py==>search  returning value of canonical board -v:  [0.00937483]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  3706
ChessGame==>getNextState  param action number:  3706 self.n*self.n:  64
selected action:  7 1 7 2
MOVE:  h2h3
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  h2h3
MOOOVOVOEOEaaaa:  23
position:  h2h3
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  3706 next_s:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388082358>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  7 6 7 5  at:  4029
count:  5
inserting:  6 6 6 5  at:  3509
count:  6
inserting:  5 6 5 5  at:  2989
count:  7
inserting:  4 6 4 5  at:  2469
count:  8
inserting:  3 6 3 5  at:  1949
count:  9
inserting:  2 6 2 5  at:  1429
count:  10
inserting:  1 6 1 5  at:  909
count:  11
inserting:  0 6 0 5  at:  389
count:  12
inserting:  7 6 7 4  at:  4028
count:  13
inserting:  6 6 6 4  at:  3508
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
inserting:  0 6 0 4  at:  388
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00851127]
MCTS.py==>search  returning value of canonical board -v:  [0.00851127]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2146
ChessGame==>getNextState  param action number:  2146 self.n*self.n:  64
selected action:  4 1 4 2
MOVE:  e2e3
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  e2e3
MOOOVOVOEOEaaaa:  20
position:  e2e3
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . P . . .
P P P P . P P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . P . . .
P P P P . P P P
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  2146 next_s:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . P . . .
P P P P . P P P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  0  1  1  1  0  0  0  0  1  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . P . . .
P P P P . P P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . P . . .
P P P P . P P P
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388082550>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  7 6 7 5  at:  4029
count:  5
inserting:  6 6 6 5  at:  3509
count:  6
inserting:  5 6 5 5  at:  2989
count:  7
inserting:  4 6 4 5  at:  2469
count:  8
inserting:  3 6 3 5  at:  1949
count:  9
inserting:  2 6 2 5  at:  1429
count:  10
inserting:  1 6 1 5  at:  909
count:  11
inserting:  0 6 0 5  at:  389
count:  12
inserting:  7 6 7 4  at:  4028
count:  13
inserting:  6 6 6 4  at:  3508
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
inserting:  0 6 0 4  at:  388
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00741292]
MCTS.py==>search  returning value of canonical board -v:  [0.00741292]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  3114
ChessGame==>getNextState  param action number:  3114 self.n*self.n:  64
selected action:  6 0 5 2
MOVE:  g1f3
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  g1f3
position:  g1f3
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . N . .
P P P P P P P P
R N B Q K B . R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . N . .
P P P P P P P P
R N B Q K B . R player:  -1
MCTS.py==>search  best_act:  3114 next_s:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . N . .
P P P P P P P P
R N B Q K B . R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  0  4  1  1  1  1  1  1  1  1  0  0  0  0  0  2  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . N . .
P P P P P P P P
R N B Q K B . R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . N . .
P P P P P P P P
R N B Q K B . R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880943c8>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  7 6 7 5  at:  4029
count:  5
inserting:  6 6 6 5  at:  3509
count:  6
inserting:  5 6 5 5  at:  2989
count:  7
inserting:  4 6 4 5  at:  2469
count:  8
inserting:  3 6 3 5  at:  1949
count:  9
inserting:  2 6 2 5  at:  1429
count:  10
inserting:  1 6 1 5  at:  909
count:  11
inserting:  0 6 0 5  at:  389
count:  12
inserting:  7 6 7 4  at:  4028
count:  13
inserting:  6 6 6 4  at:  3508
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
inserting:  0 6 0 4  at:  388
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00967864]
MCTS.py==>search  returning value of canonical board -v:  [0.00967864]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  587
ChessGame==>getNextState  param action number:  587 self.n*self.n:  64
selected action:  1 1 1 3
MOVE:  b2b4
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  b2b4
MOOOVOVOEOEaaaa:  25
position:  b2b4
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. P . . . . . .
. . . . . . . .
P . P P P P P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. P . . . . . .
. . . . . . . .
P . P P P P P P
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  587 next_s:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. P . . . . . .
. . . . . . . .
P . P P P P P P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. P . . . . . .
. . . . . . . .
P . P P P P P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. P . . . . . .
. . . . . . . .
P . P P P P P P
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388082748>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  7 6 7 5  at:  4029
count:  5
inserting:  6 6 6 5  at:  3509
count:  6
inserting:  5 6 5 5  at:  2989
count:  7
inserting:  4 6 4 5  at:  2469
count:  8
inserting:  3 6 3 5  at:  1949
count:  9
inserting:  2 6 2 5  at:  1429
count:  10
inserting:  1 6 1 5  at:  909
count:  11
inserting:  0 6 0 5  at:  389
count:  12
inserting:  7 6 7 4  at:  4028
count:  13
inserting:  6 6 6 4  at:  3508
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
inserting:  0 6 0 4  at:  388
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01214109]
MCTS.py==>search  returning value of canonical board -v:  [0.01214109]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  514
ChessGame==>getNextState  param action number:  514 self.n*self.n:  64
selected action:  1 0 0 2
MOVE:  b1a3
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  b1a3
position:  b1a3
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
N . . . . . . .
P P P P P P P P
R . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
N . . . . . . .
P P P P P P P P
R . B Q K B N R player:  -1
MCTS.py==>search  best_act:  514 next_s:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
N . . . . . . .
P P P P P P P P
R . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  1  1  1  1  1  1  1  1  2  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
N . . . . . . .
P P P P P P P P
R . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
N . . . . . . .
P P P P P P P P
R . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388094ac8>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  7 6 7 5  at:  4029
count:  5
inserting:  6 6 6 5  at:  3509
count:  6
inserting:  5 6 5 5  at:  2989
count:  7
inserting:  4 6 4 5  at:  2469
count:  8
inserting:  3 6 3 5  at:  1949
count:  9
inserting:  2 6 2 5  at:  1429
count:  10
inserting:  1 6 1 5  at:  909
count:  11
inserting:  0 6 0 5  at:  389
count:  12
inserting:  7 6 7 4  at:  4028
count:  13
inserting:  6 6 6 4  at:  3508
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
inserting:  0 6 0 4  at:  388
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01541188]
MCTS.py==>search  returning value of canonical board -v:  [0.01541188]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  1107
ChessGame==>getNextState  param action number:  1107 self.n*self.n:  64
selected action:  2 1 2 3
MOVE:  c2c4
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  c2c4
MOOOVOVOEOEaaaa:  26
position:  c2c4
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . P . . . . .
. . . . . . . .
P P . P P P P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . P . . . . .
. . . . . . . .
P P . P P P P P
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  1107 next_s:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . P . . . . .
. . . . . . . .
P P . P P P P P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  0  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . P . . . . .
. . . . . . . .
P P . P P P P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . P . . . . .
. . . . . . . .
P P . P P P P P
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388094630>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  7 6 7 5  at:  4029
count:  5
inserting:  6 6 6 5  at:  3509
count:  6
inserting:  5 6 5 5  at:  2989
count:  7
inserting:  4 6 4 5  at:  2469
count:  8
inserting:  3 6 3 5  at:  1949
count:  9
inserting:  2 6 2 5  at:  1429
count:  10
inserting:  1 6 1 5  at:  909
count:  11
inserting:  0 6 0 5  at:  389
count:  12
inserting:  7 6 7 4  at:  4028
count:  13
inserting:  6 6 6 4  at:  3508
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
inserting:  0 6 0 4  at:  388
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00890504]
MCTS.py==>search  returning value of canonical board -v:  [0.00890504]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  1626
ChessGame==>getNextState  param action number:  1626 self.n*self.n:  64
selected action:  3 1 3 2
MOVE:  d2d3
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  d2d3
MOOOVOVOEOEaaaa:  19
position:  d2d3
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . P . . . .
P P P . P P P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . P . . . .
P P P . P P P P
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  1626 next_s:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . P . . . .
P P P . P P P P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  0  1  1  1  1  0  0  0  1  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . P . . . .
P P P . P P P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . P . . . .
P P P . P P P P
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f138809b390>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  7 6 7 5  at:  4029
count:  5
inserting:  6 6 6 5  at:  3509
count:  6
inserting:  5 6 5 5  at:  2989
count:  7
inserting:  4 6 4 5  at:  2469
count:  8
inserting:  3 6 3 5  at:  1949
count:  9
inserting:  2 6 2 5  at:  1429
count:  10
inserting:  1 6 1 5  at:  909
count:  11
inserting:  0 6 0 5  at:  389
count:  12
inserting:  7 6 7 4  at:  4028
count:  13
inserting:  6 6 6 4  at:  3508
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
inserting:  0 6 0 4  at:  388
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00085122]
MCTS.py==>search  returning value of canonical board -v:  [0.00085122]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  3187
ChessGame==>getNextState  param action number:  3187 self.n*self.n:  64
selected action:  6 1 6 3
MOVE:  g2g4
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  g2g4
MOOOVOVOEOEaaaa:  30
position:  g2g4
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . P .
. . . . . . . .
P P P P P P . P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . P .
. . . . . . . .
P P P P P P . P
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  3187 next_s:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . P .
. . . . . . . .
P P P P P P . P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  0  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . P .
. . . . . . . .
P P P P P P . P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . P .
. . . . . . . .
P P P P P P . P
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880a0048>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  7 6 7 5  at:  4029
count:  5
inserting:  6 6 6 5  at:  3509
count:  6
inserting:  5 6 5 5  at:  2989
count:  7
inserting:  4 6 4 5  at:  2469
count:  8
inserting:  3 6 3 5  at:  1949
count:  9
inserting:  2 6 2 5  at:  1429
count:  10
inserting:  1 6 1 5  at:  909
count:  11
inserting:  0 6 0 5  at:  389
count:  12
inserting:  7 6 7 4  at:  4028
count:  13
inserting:  6 6 6 4  at:  3508
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
inserting:  0 6 0 4  at:  388
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.0064869]
MCTS.py==>search  returning value of canonical board -v:  [0.0064869]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  3186
ChessGame==>getNextState  param action number:  3186 self.n*self.n:  64
selected action:  6 1 6 2
MOVE:  g2g3
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  g2g3
MOOOVOVOEOEaaaa:  22
position:  g2g3
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . P .
P P P P P P . P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . P .
P P P P P P . P
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  3186 next_s:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . P .
P P P P P P . P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  0  1  0  0  0  0  0  0  1  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . P .
P P P P P P . P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . P .
P P P P P P . P
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880a0588>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  7 6 7 5  at:  4029
count:  5
inserting:  6 6 6 5  at:  3509
count:  6
inserting:  5 6 5 5  at:  2989
count:  7
inserting:  4 6 4 5  at:  2469
count:  8
inserting:  3 6 3 5  at:  1949
count:  9
inserting:  2 6 2 5  at:  1429
count:  10
inserting:  1 6 1 5  at:  909
count:  11
inserting:  0 6 0 5  at:  389
count:  12
inserting:  7 6 7 4  at:  4028
count:  13
inserting:  6 6 6 4  at:  3508
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
inserting:  0 6 0 4  at:  388
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01254306]
MCTS.py==>search  returning value of canonical board -v:  [0.01254306]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2666
ChessGame==>getNextState  param action number:  2666 self.n*self.n:  64
selected action:  5 1 5 2
MOVE:  f2f3
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  f2f3
MOOOVOVOEOEaaaa:  21
position:  f2f3
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . P . .
P P P P P . P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . P . .
P P P P P . P P
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  2666 next_s:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . P . .
P P P P P . P P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  1  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . P . .
P P P P P . P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . P . .
P P P P P . P P
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880a0b00>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  7 6 7 5  at:  4029
count:  5
inserting:  6 6 6 5  at:  3509
count:  6
inserting:  5 6 5 5  at:  2989
count:  7
inserting:  4 6 4 5  at:  2469
count:  8
inserting:  3 6 3 5  at:  1949
count:  9
inserting:  2 6 2 5  at:  1429
count:  10
inserting:  1 6 1 5  at:  909
count:  11
inserting:  0 6 0 5  at:  389
count:  12
inserting:  7 6 7 4  at:  4028
count:  13
inserting:  6 6 6 4  at:  3508
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
inserting:  0 6 0 4  at:  388
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01125368]
MCTS.py==>search  returning value of canonical board -v:  [0.01125368]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2667
ChessGame==>getNextState  param action number:  2667 self.n*self.n:  64
selected action:  5 1 5 3
MOVE:  f2f4
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  f2f4
MOOOVOVOEOEaaaa:  29
position:  f2f4
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  2667 next_s:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880a0550>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  7 6 7 5  at:  4029
count:  5
inserting:  6 6 6 5  at:  3509
count:  6
inserting:  5 6 5 5  at:  2989
count:  7
inserting:  4 6 4 5  at:  2469
count:  8
inserting:  3 6 3 5  at:  1949
count:  9
inserting:  2 6 2 5  at:  1429
count:  10
inserting:  1 6 1 5  at:  909
count:  11
inserting:  0 6 0 5  at:  389
count:  12
inserting:  7 6 7 4  at:  4028
count:  13
inserting:  6 6 6 4  at:  3508
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
inserting:  0 6 0 4  at:  388
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00869443]
MCTS.py==>search  returning value of canonical board -v:  [0.00869443]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>getActionProb self.game.stringRepresentation(canonicalBoard)  s:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>getActionProb returns: probs  counts:  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] probs:  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07142857142857142, 0.07142857142857142, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07142857142857142, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07142857142857142, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07142857142857142, 0.07142857142857142, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07142857142857142, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07142857142857142, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07142857142857142, 0.07142857142857142, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07142857142857142, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07142857142857142, 0.07142857142857142, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07142857142857142, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Coach.py ==>executeEpisode  action:  3706
ChessGame==>getNextState  param action number:  3706 self.n*self.n:  64
selected action:  7 1 7 2
MOVE:  h2h3
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  h2h3
MOOOVOVOEOEaaaa:  23
position:  h2h3
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
FINAL SELECTED MOVE NEW BOARD:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  -1
Coach.py ==>executeEpisode  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R self.curPlayer:  -1
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  -1
Coach.py ==>executeEpisode  canonicalBoard:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  388
ChessGame==>getNextState  param action number:  388 self.n*self.n:  64
selected action:  0 6 0 4
MOVE:  a7a5
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  a7a5
MOOOVOVOEOEaaaa:  32
position:  a7a5
board:  r n b q k b n r
. p p p p p p p
. . . . . . . .
p . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p p p
. . . . . . . .
p . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  388 next_s:  r n b q k b n r
. p p p p p p p
. . . . . . . .
p . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p p p
. . . . . . . .
p . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p p p p
. . . . . . . .
p . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f138809b588>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  7 2 7 3  at:  3771
count:  5
inserting:  6 1 6 2  at:  3186
count:  6
inserting:  5 1 5 2  at:  2666
count:  7
inserting:  4 1 4 2  at:  2146
count:  8
inserting:  3 1 3 2  at:  1626
count:  9
inserting:  2 1 2 2  at:  1106
count:  10
inserting:  1 1 1 2  at:  586
count:  11
inserting:  0 1 0 2  at:  66
count:  12
inserting:  6 1 6 3  at:  3187
count:  13
inserting:  5 1 5 3  at:  2667
count:  14
inserting:  4 1 4 3  at:  2147
count:  15
inserting:  3 1 3 3  at:  1627
count:  16
inserting:  2 1 2 3  at:  1107
count:  17
inserting:  1 1 1 3  at:  587
count:  18
inserting:  0 1 0 3  at:  67
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00795934]
MCTS.py==>search  returning value of canonical board -v:  [0.00795934]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2468
ChessGame==>getNextState  param action number:  2468 self.n*self.n:  64
selected action:  4 6 4 4
MOVE:  e7e5
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  e7e5
MOOOVOVOEOEaaaa:  36
position:  e7e5
board:  r n b q k b n r
p p p p . p p p
. . . . . . . .
. . . . p . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p . p p p
. . . . . . . .
. . . . p . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  2468 next_s:  r n b q k b n r
p p p p . p p p
. . . . . . . .
. . . . p . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1  0 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p . p p p
. . . . . . . .
. . . . p . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p . p p p
. . . . . . . .
. . . . p . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388094c88>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  7 2 7 3  at:  3771
count:  5
inserting:  6 1 6 2  at:  3186
count:  6
inserting:  5 1 5 2  at:  2666
count:  7
inserting:  4 1 4 2  at:  2146
count:  8
inserting:  3 1 3 2  at:  1626
count:  9
inserting:  2 1 2 2  at:  1106
count:  10
inserting:  1 1 1 2  at:  586
count:  11
inserting:  0 1 0 2  at:  66
count:  12
inserting:  6 1 6 3  at:  3187
count:  13
inserting:  5 1 5 3  at:  2667
count:  14
inserting:  4 1 4 3  at:  2147
count:  15
inserting:  3 1 3 3  at:  1627
count:  16
inserting:  2 1 2 3  at:  1107
count:  17
inserting:  1 1 1 3  at:  587
count:  18
inserting:  0 1 0 3  at:  67
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.0009191]
MCTS.py==>search  returning value of canonical board -v:  [0.0009191]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  965
ChessGame==>getNextState  param action number:  965 self.n*self.n:  64
selected action:  1 7 0 5
MOVE:  b8a6
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  b8a6
position:  b8a6
board:  r . b q k b n r
p p p p p p p p
n . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r . b q k b n r
p p p p p p p p
n . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  965 next_s:  r . b q k b n r
p p p p p p p p
n . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -2  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4  0 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r . b q k b n r
p p p p p p p p
n . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r . b q k b n r
p p p p p p p p
n . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880940f0>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  7 2 7 3  at:  3771
count:  5
inserting:  6 1 6 2  at:  3186
count:  6
inserting:  5 1 5 2  at:  2666
count:  7
inserting:  4 1 4 2  at:  2146
count:  8
inserting:  3 1 3 2  at:  1626
count:  9
inserting:  2 1 2 2  at:  1106
count:  10
inserting:  1 1 1 2  at:  586
count:  11
inserting:  0 1 0 2  at:  66
count:  12
inserting:  6 1 6 3  at:  3187
count:  13
inserting:  5 1 5 3  at:  2667
count:  14
inserting:  4 1 4 3  at:  2147
count:  15
inserting:  3 1 3 3  at:  1627
count:  16
inserting:  2 1 2 3  at:  1107
count:  17
inserting:  1 1 1 3  at:  587
count:  18
inserting:  0 1 0 3  at:  67
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00818278]
MCTS.py==>search  returning value of canonical board -v:  [0.00818278]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  389
ChessGame==>getNextState  param action number:  389 self.n*self.n:  64
selected action:  0 6 0 5
MOVE:  a7a6
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  a7a6
MOOOVOVOEOEaaaa:  40
position:  a7a6
board:  r n b q k b n r
. p p p p p p p
p . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p p p
p . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  389 next_s:  r n b q k b n r
. p p p p p p p
p . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p p p
p . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p p p p
p . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880827f0>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  7 2 7 3  at:  3771
count:  5
inserting:  6 1 6 2  at:  3186
count:  6
inserting:  5 1 5 2  at:  2666
count:  7
inserting:  4 1 4 2  at:  2146
count:  8
inserting:  3 1 3 2  at:  1626
count:  9
inserting:  2 1 2 2  at:  1106
count:  10
inserting:  1 1 1 2  at:  586
count:  11
inserting:  0 1 0 2  at:  66
count:  12
inserting:  6 1 6 3  at:  3187
count:  13
inserting:  5 1 5 3  at:  2667
count:  14
inserting:  4 1 4 3  at:  2147
count:  15
inserting:  3 1 3 3  at:  1627
count:  16
inserting:  2 1 2 3  at:  1107
count:  17
inserting:  1 1 1 3  at:  587
count:  18
inserting:  0 1 0 3  at:  67
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00832273]
MCTS.py==>search  returning value of canonical board -v:  [0.00832273]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2989
ChessGame==>getNextState  param action number:  2989 self.n*self.n:  64
selected action:  5 6 5 5
MOVE:  f7f6
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  f7f6
MOOOVOVOEOEaaaa:  45
position:  f7f6
board:  r n b q k b n r
p p p p p . p p
. . . . . p . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p . p p
. . . . . p . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  2989 next_s:  r n b q k b n r
p p p p p . p p
. . . . . p . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0
 -1 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p . p p
. . . . . p . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p p . p p
. . . . . p . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880940f0>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  7 2 7 3  at:  3771
count:  5
inserting:  6 1 6 2  at:  3186
count:  6
inserting:  5 1 5 2  at:  2666
count:  7
inserting:  4 1 4 2  at:  2146
count:  8
inserting:  3 1 3 2  at:  1626
count:  9
inserting:  2 1 2 2  at:  1106
count:  10
inserting:  1 1 1 2  at:  586
count:  11
inserting:  0 1 0 2  at:  66
count:  12
inserting:  6 1 6 3  at:  3187
count:  13
inserting:  5 1 5 3  at:  2667
count:  14
inserting:  4 1 4 3  at:  2147
count:  15
inserting:  3 1 3 3  at:  1627
count:  16
inserting:  2 1 2 3  at:  1107
count:  17
inserting:  1 1 1 3  at:  587
count:  18
inserting:  0 1 0 3  at:  67
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00729106]
MCTS.py==>search  returning value of canonical board -v:  [0.00729106]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  1428
ChessGame==>getNextState  param action number:  1428 self.n*self.n:  64
selected action:  2 6 2 4
MOVE:  c7c5
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  c7c5
MOOOVOVOEOEaaaa:  34
position:  c7c5
board:  r n b q k b n r
p p . p p p p p
. . . . . . . .
. . p . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p . p p p p p
. . . . . . . .
. . p . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  1428 next_s:  r n b q k b n r
p p . p p p p p
. . . . . . . .
. . p . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1  0 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p . p p p p p
. . . . . . . .
. . p . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p . p p p p p
. . . . . . . .
. . p . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880827b8>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  7 2 7 3  at:  3771
count:  5
inserting:  6 1 6 2  at:  3186
count:  6
inserting:  5 1 5 2  at:  2666
count:  7
inserting:  4 1 4 2  at:  2146
count:  8
inserting:  3 1 3 2  at:  1626
count:  9
inserting:  2 1 2 2  at:  1106
count:  10
inserting:  1 1 1 2  at:  586
count:  11
inserting:  0 1 0 2  at:  66
count:  12
inserting:  6 1 6 3  at:  3187
count:  13
inserting:  5 1 5 3  at:  2667
count:  14
inserting:  4 1 4 3  at:  2147
count:  15
inserting:  3 1 3 3  at:  1627
count:  16
inserting:  2 1 2 3  at:  1107
count:  17
inserting:  1 1 1 3  at:  587
count:  18
inserting:  0 1 0 3  at:  67
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00491716]
MCTS.py==>search  returning value of canonical board -v:  [0.00491716]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2469
ChessGame==>getNextState  param action number:  2469 self.n*self.n:  64
selected action:  4 6 4 5
MOVE:  e7e6
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  e7e6
MOOOVOVOEOEaaaa:  44
position:  e7e6
board:  r n b q k b n r
p p p p . p p p
. . . . p . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p . p p p
. . . . p . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  2469 next_s:  r n b q k b n r
p p p p . p p p
. . . . p . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0
 -1 -1 -1 -1  0 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p . p p p
. . . . p . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p . p p p
. . . . p . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880a0c88>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  7 2 7 3  at:  3771
count:  5
inserting:  6 1 6 2  at:  3186
count:  6
inserting:  5 1 5 2  at:  2666
count:  7
inserting:  4 1 4 2  at:  2146
count:  8
inserting:  3 1 3 2  at:  1626
count:  9
inserting:  2 1 2 2  at:  1106
count:  10
inserting:  1 1 1 2  at:  586
count:  11
inserting:  0 1 0 2  at:  66
count:  12
inserting:  6 1 6 3  at:  3187
count:  13
inserting:  5 1 5 3  at:  2667
count:  14
inserting:  4 1 4 3  at:  2147
count:  15
inserting:  3 1 3 3  at:  1627
count:  16
inserting:  2 1 2 3  at:  1107
count:  17
inserting:  1 1 1 3  at:  587
count:  18
inserting:  0 1 0 3  at:  67
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00491714]
MCTS.py==>search  returning value of canonical board -v:  [0.00491714]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  4028
ChessGame==>getNextState  param action number:  4028 self.n*self.n:  64
selected action:  7 6 7 4
MOVE:  h7h5
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  h7h5
MOOOVOVOEOEaaaa:  39
position:  h7h5
board:  r n b q k b n r
p p p p p p p .
. . . . . . . .
. . . . . . . p
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p p .
. . . . . . . .
. . . . . . . p
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  4028 next_s:  r n b q k b n r
p p p p p p p .
. . . . . . . .
. . . . . . . p
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1  0 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p p .
. . . . . . . .
. . . . . . . p
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p p p p .
. . . . . . . .
. . . . . . . p
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880a0c88>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  7 2 7 3  at:  3771
count:  5
inserting:  6 1 6 2  at:  3186
count:  6
inserting:  5 1 5 2  at:  2666
count:  7
inserting:  4 1 4 2  at:  2146
count:  8
inserting:  3 1 3 2  at:  1626
count:  9
inserting:  2 1 2 2  at:  1106
count:  10
inserting:  1 1 1 2  at:  586
count:  11
inserting:  0 1 0 2  at:  66
count:  12
inserting:  6 1 6 3  at:  3187
count:  13
inserting:  5 1 5 3  at:  2667
count:  14
inserting:  4 1 4 3  at:  2147
count:  15
inserting:  3 1 3 3  at:  1627
count:  16
inserting:  2 1 2 3  at:  1107
count:  17
inserting:  1 1 1 3  at:  587
count:  18
inserting:  0 1 0 3  at:  67
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00763121]
MCTS.py==>search  returning value of canonical board -v:  [0.00763121]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  3509
ChessGame==>getNextState  param action number:  3509 self.n*self.n:  64
selected action:  6 6 6 5
MOVE:  g7g6
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  g7g6
MOOOVOVOEOEaaaa:  46
position:  g7g6
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  3509 next_s:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388058208>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  7 2 7 3  at:  3771
count:  5
inserting:  6 1 6 2  at:  3186
count:  6
inserting:  5 1 5 2  at:  2666
count:  7
inserting:  4 1 4 2  at:  2146
count:  8
inserting:  3 1 3 2  at:  1626
count:  9
inserting:  2 1 2 2  at:  1106
count:  10
inserting:  1 1 1 2  at:  586
count:  11
inserting:  0 1 0 2  at:  66
count:  12
inserting:  6 1 6 3  at:  3187
count:  13
inserting:  5 1 5 3  at:  2667
count:  14
inserting:  4 1 4 3  at:  2147
count:  15
inserting:  3 1 3 3  at:  1627
count:  16
inserting:  2 1 2 3  at:  1107
count:  17
inserting:  1 1 1 3  at:  587
count:  18
inserting:  0 1 0 3  at:  67
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.0095414]
MCTS.py==>search  returning value of canonical board -v:  [0.0095414]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  1429
ChessGame==>getNextState  param action number:  1429 self.n*self.n:  64
selected action:  2 6 2 5
MOVE:  c7c6
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  c7c6
MOOOVOVOEOEaaaa:  42
position:  c7c6
board:  r n b q k b n r
p p . p p p p p
. . p . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p . p p p p p
. . p . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  1429 next_s:  r n b q k b n r
p p . p p p p p
. . p . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0
 -1 -1  0 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p . p p p p p
. . p . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p . p p p p p
. . p . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880a0f98>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  7 2 7 3  at:  3771
count:  5
inserting:  6 1 6 2  at:  3186
count:  6
inserting:  5 1 5 2  at:  2666
count:  7
inserting:  4 1 4 2  at:  2146
count:  8
inserting:  3 1 3 2  at:  1626
count:  9
inserting:  2 1 2 2  at:  1106
count:  10
inserting:  1 1 1 2  at:  586
count:  11
inserting:  0 1 0 2  at:  66
count:  12
inserting:  6 1 6 3  at:  3187
count:  13
inserting:  5 1 5 3  at:  2667
count:  14
inserting:  4 1 4 3  at:  2147
count:  15
inserting:  3 1 3 3  at:  1627
count:  16
inserting:  2 1 2 3  at:  1107
count:  17
inserting:  1 1 1 3  at:  587
count:  18
inserting:  0 1 0 3  at:  67
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00974706]
MCTS.py==>search  returning value of canonical board -v:  [0.00974706]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2988
ChessGame==>getNextState  param action number:  2988 self.n*self.n:  64
selected action:  5 6 5 4
MOVE:  f7f5
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  f7f5
MOOOVOVOEOEaaaa:  37
position:  f7f5
board:  r n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  2988 next_s:  r n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880a0390>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  7 2 7 3  at:  3771
count:  5
inserting:  6 1 6 2  at:  3186
count:  6
inserting:  5 1 5 2  at:  2666
count:  7
inserting:  4 1 4 2  at:  2146
count:  8
inserting:  3 1 3 2  at:  1626
count:  9
inserting:  2 1 2 2  at:  1106
count:  10
inserting:  1 1 1 2  at:  586
count:  11
inserting:  0 1 0 2  at:  66
count:  12
inserting:  6 1 6 3  at:  3187
count:  13
inserting:  5 1 5 3  at:  2667
count:  14
inserting:  4 1 4 3  at:  2147
count:  15
inserting:  3 1 3 3  at:  1627
count:  16
inserting:  2 1 2 3  at:  1107
count:  17
inserting:  1 1 1 3  at:  587
count:  18
inserting:  0 1 0 3  at:  67
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00794125]
MCTS.py==>search  returning value of canonical board -v:  [0.00794125]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  3565
ChessGame==>getNextState  param action number:  3565 self.n*self.n:  64
selected action:  6 7 5 5
MOVE:  g8f6
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  g8f6
position:  g8f6
board:  r n b q k b . r
p p p p p p p p
. . . . . n . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b . r
p p p p p p p p
. . . . . n . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  3565 next_s:  r n b q k b . r
p p p p p p p p
. . . . . n . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -2  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3  0 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b . r
p p p p p p p p
. . . . . n . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b . r
p p p p p p p p
. . . . . n . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880a0160>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  7 2 7 3  at:  3771
count:  5
inserting:  6 1 6 2  at:  3186
count:  6
inserting:  5 1 5 2  at:  2666
count:  7
inserting:  4 1 4 2  at:  2146
count:  8
inserting:  3 1 3 2  at:  1626
count:  9
inserting:  2 1 2 2  at:  1106
count:  10
inserting:  1 1 1 2  at:  586
count:  11
inserting:  0 1 0 2  at:  66
count:  12
inserting:  6 1 6 3  at:  3187
count:  13
inserting:  5 1 5 3  at:  2667
count:  14
inserting:  4 1 4 3  at:  2147
count:  15
inserting:  3 1 3 3  at:  1627
count:  16
inserting:  2 1 2 3  at:  1107
count:  17
inserting:  1 1 1 3  at:  587
count:  18
inserting:  0 1 0 3  at:  67
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00365361]
MCTS.py==>search  returning value of canonical board -v:  [0.00365361]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  981
ChessGame==>getNextState  param action number:  981 self.n*self.n:  64
selected action:  1 7 2 5
MOVE:  b8c6
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  b8c6
position:  b8c6
board:  r . b q k b n r
p p p p p p p p
. . n . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r . b q k b n r
p p p p p p p p
. . n . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  981 next_s:  r . b q k b n r
p p p p p p p p
. . n . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -2  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4  0 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r . b q k b n r
p p p p p p p p
. . n . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r . b q k b n r
p p p p p p p p
. . n . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388082390>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  7 2 7 3  at:  3771
count:  5
inserting:  6 1 6 2  at:  3186
count:  6
inserting:  5 1 5 2  at:  2666
count:  7
inserting:  4 1 4 2  at:  2146
count:  8
inserting:  3 1 3 2  at:  1626
count:  9
inserting:  2 1 2 2  at:  1106
count:  10
inserting:  1 1 1 2  at:  586
count:  11
inserting:  0 1 0 2  at:  66
count:  12
inserting:  6 1 6 3  at:  3187
count:  13
inserting:  5 1 5 3  at:  2667
count:  14
inserting:  4 1 4 3  at:  2147
count:  15
inserting:  3 1 3 3  at:  1627
count:  16
inserting:  2 1 2 3  at:  1107
count:  17
inserting:  1 1 1 3  at:  587
count:  18
inserting:  0 1 0 3  at:  67
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01064215]
MCTS.py==>search  returning value of canonical board -v:  [0.01064215]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  908
ChessGame==>getNextState  param action number:  908 self.n*self.n:  64
selected action:  1 6 1 4
MOVE:  b7b5
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  b7b5
MOOOVOVOEOEaaaa:  33
position:  b7b5
board:  r n b q k b n r
p . p p p p p p
. . . . . . . .
. p . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p . p p p p p p
. . . . . . . .
. p . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  908 next_s:  r n b q k b n r
p . p p p p p p
. . . . . . . .
. p . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1  0 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p . p p p p p p
. . . . . . . .
. p . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p . p p p p p p
. . . . . . . .
. p . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880941d0>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  7 2 7 3  at:  3771
count:  5
inserting:  6 1 6 2  at:  3186
count:  6
inserting:  5 1 5 2  at:  2666
count:  7
inserting:  4 1 4 2  at:  2146
count:  8
inserting:  3 1 3 2  at:  1626
count:  9
inserting:  2 1 2 2  at:  1106
count:  10
inserting:  1 1 1 2  at:  586
count:  11
inserting:  0 1 0 2  at:  66
count:  12
inserting:  6 1 6 3  at:  3187
count:  13
inserting:  5 1 5 3  at:  2667
count:  14
inserting:  4 1 4 3  at:  2147
count:  15
inserting:  3 1 3 3  at:  1627
count:  16
inserting:  2 1 2 3  at:  1107
count:  17
inserting:  1 1 1 3  at:  587
count:  18
inserting:  0 1 0 3  at:  67
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00857052]
MCTS.py==>search  returning value of canonical board -v:  [0.00857052]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  1948
ChessGame==>getNextState  param action number:  1948 self.n*self.n:  64
selected action:  3 6 3 4
MOVE:  d7d5
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  d7d5
MOOOVOVOEOEaaaa:  35
position:  d7d5
board:  r n b q k b n r
p p p . p p p p
. . . . . . . .
. . . p . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p . p p p p
. . . . . . . .
. . . p . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  1948 next_s:  r n b q k b n r
p p p . p p p p
. . . . . . . .
. . . p . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1  0 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p . p p p p
. . . . . . . .
. . . p . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p . p p p p
. . . . . . . .
. . . p . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388094518>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  7 2 7 3  at:  3771
count:  5
inserting:  6 1 6 2  at:  3186
count:  6
inserting:  5 1 5 2  at:  2666
count:  7
inserting:  4 1 4 2  at:  2146
count:  8
inserting:  3 1 3 2  at:  1626
count:  9
inserting:  2 1 2 2  at:  1106
count:  10
inserting:  1 1 1 2  at:  586
count:  11
inserting:  0 1 0 2  at:  66
count:  12
inserting:  6 1 6 3  at:  3187
count:  13
inserting:  5 1 5 3  at:  2667
count:  14
inserting:  4 1 4 3  at:  2147
count:  15
inserting:  3 1 3 3  at:  1627
count:  16
inserting:  2 1 2 3  at:  1107
count:  17
inserting:  1 1 1 3  at:  587
count:  18
inserting:  0 1 0 3  at:  67
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00363447]
MCTS.py==>search  returning value of canonical board -v:  [0.00363447]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>getActionProb self.game.stringRepresentation(canonicalBoard)  s:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>getActionProb returns: probs  counts:  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] probs:  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Coach.py ==>executeEpisode  action:  3509
ChessGame==>getNextState  param action number:  3509 self.n*self.n:  64
selected action:  6 6 6 5
MOVE:  g7g6
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  g7g6
MOOOVOVOEOEaaaa:  46
position:  g7g6
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
FINAL SELECTED MOVE NEW BOARD:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  1
Coach.py ==>executeEpisode  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R self.curPlayer:  1
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R player:  1
Coach.py ==>executeEpisode  canonicalBoard:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  66
ChessGame==>getNextState  param action number:  66 self.n*self.n:  64
selected action:  0 1 0 2
MOVE:  a2a3
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  a2a3
MOOOVOVOEOEaaaa:  16
position:  a2a3
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
P . . . . . . P
. P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
P . . . . . . P
. P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  66 next_s:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
P . . . . . . P
. P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  1  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
P . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
P . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f138809bfd0>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  294
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  1 7 0 5  at:  965
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  0 6 0 5  at:  389
count:  13
inserting:  6 5 6 4  at:  3444
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  5 6 5 4  at:  2988
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
inserting:  0 6 0 4  at:  388
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00841958]
MCTS.py==>search  returning value of canonical board -v:  [0.00841958]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  67
ChessGame==>getNextState  param action number:  67 self.n*self.n:  64
selected action:  0 1 0 3
MOVE:  a2a4
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  a2a4
MOOOVOVOEOEaaaa:  24
position:  a2a4
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  67 next_s:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f138809b550>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  294
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  1 7 0 5  at:  965
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  0 6 0 5  at:  389
count:  13
inserting:  6 5 6 4  at:  3444
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  5 6 5 4  at:  2988
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
inserting:  0 6 0 4  at:  388
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00900378]
MCTS.py==>search  returning value of canonical board -v:  [0.00900378]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  1106
ChessGame==>getNextState  param action number:  1106 self.n*self.n:  64
selected action:  2 1 2 2
MOVE:  c2c3
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  c2c3
MOOOVOVOEOEaaaa:  18
position:  c2c3
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . P . . . . P
P P . P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . P . . . . P
P P . P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  1106 next_s:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . P . . . . P
P P . P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  0  1  1  1  1  0  0  0  1  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . P . . . . P
P P . P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . P . . . . P
P P . P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388058438>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  294
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  1 7 0 5  at:  965
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  0 6 0 5  at:  389
count:  13
inserting:  6 5 6 4  at:  3444
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  5 6 5 4  at:  2988
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
inserting:  0 6 0 4  at:  388
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00841]
MCTS.py==>search  returning value of canonical board -v:  [0.00841]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  3771
ChessGame==>getNextState  param action number:  3771 self.n*self.n:  64
selected action:  7 2 7 3
MOVE:  h3h4
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  h3h4
MOOOVOVOEOEaaaa:  31
position:  h3h4
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . P
. . . . . . . .
P P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . P
. . . . . . . .
P P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  3771 next_s:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . P
. . . . . . . .
P P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . P
. . . . . . . .
P P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . P
. . . . . . . .
P P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388058ba8>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  294
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  1 7 0 5  at:  965
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  0 6 0 5  at:  389
count:  13
inserting:  6 5 6 4  at:  3444
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  5 6 5 4  at:  2988
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
inserting:  0 6 0 4  at:  388
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01167286]
MCTS.py==>search  returning value of canonical board -v:  [0.01167286]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  3114
ChessGame==>getNextState  param action number:  3114 self.n*self.n:  64
selected action:  6 0 5 2
MOVE:  g1f3
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  g1f3
position:  g1f3
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . N . P
P P P P P P P .
R N B Q K B . R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . N . P
P P P P P P P .
R N B Q K B . R player:  -1
MCTS.py==>search  best_act:  3114 next_s:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . N . P
P P P P P P P .
R N B Q K B . R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  0  4  1  1  1  1  1  1  1  0  0  0  0  0  0  2  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . N . P
P P P P P P P .
R N B Q K B . R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . N . P
P P P P P P P .
R N B Q K B . R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f138809b748>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  294
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  1 7 0 5  at:  965
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  0 6 0 5  at:  389
count:  13
inserting:  6 5 6 4  at:  3444
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  5 6 5 4  at:  2988
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
inserting:  0 6 0 4  at:  388
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00925657]
MCTS.py==>search  returning value of canonical board -v:  [0.00925657]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2146
ChessGame==>getNextState  param action number:  2146 self.n*self.n:  64
selected action:  4 1 4 2
MOVE:  e2e3
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  e2e3
MOOOVOVOEOEaaaa:  20
position:  e2e3
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . P . . P
P P P P . P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . P . . P
P P P P . P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  2146 next_s:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . P . . P
P P P P . P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  0  1  1  0  0  0  0  0  1  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . P . . P
P P P P . P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . P . . P
P P P P . P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f138809b128>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  294
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  1 7 0 5  at:  965
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  0 6 0 5  at:  389
count:  13
inserting:  6 5 6 4  at:  3444
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  5 6 5 4  at:  2988
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
inserting:  0 6 0 4  at:  388
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00932931]
MCTS.py==>search  returning value of canonical board -v:  [0.00932931]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  514
ChessGame==>getNextState  param action number:  514 self.n*self.n:  64
selected action:  1 0 0 2
MOVE:  b1a3
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  b1a3
position:  b1a3
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
N . . . . . . P
P P P P P P P .
R . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
N . . . . . . P
P P P P P P P .
R . B Q K B N R player:  -1
MCTS.py==>search  best_act:  514 next_s:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
N . . . . . . P
P P P P P P P .
R . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  1  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
N . . . . . . P
P P P P P P P .
R . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
N . . . . . . P
P P P P P P P .
R . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f138809bfd0>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  294
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  1 7 0 5  at:  965
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  0 6 0 5  at:  389
count:  13
inserting:  6 5 6 4  at:  3444
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  5 6 5 4  at:  2988
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
inserting:  0 6 0 4  at:  388
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01535487]
MCTS.py==>search  returning value of canonical board -v:  [0.01535487]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  587
ChessGame==>getNextState  param action number:  587 self.n*self.n:  64
selected action:  1 1 1 3
MOVE:  b2b4
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  b2b4
MOOOVOVOEOEaaaa:  25
position:  b2b4
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. P . . . . . .
. . . . . . . P
P . P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. P . . . . . .
. . . . . . . P
P . P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  587 next_s:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. P . . . . . .
. . . . . . . P
P . P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  0  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. P . . . . . .
. . . . . . . P
P . P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. P . . . . . .
. . . . . . . P
P . P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880824a8>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  294
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  1 7 0 5  at:  965
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  0 6 0 5  at:  389
count:  13
inserting:  6 5 6 4  at:  3444
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  5 6 5 4  at:  2988
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
inserting:  0 6 0 4  at:  388
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01187989]
MCTS.py==>search  returning value of canonical board -v:  [0.01187989]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  1626
ChessGame==>getNextState  param action number:  1626 self.n*self.n:  64
selected action:  3 1 3 2
MOVE:  d2d3
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  d2d3
MOOOVOVOEOEaaaa:  19
position:  d2d3
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . P . . . P
P P P . P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . P . . . P
P P P . P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  1626 next_s:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . P . . . P
P P P . P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  0  1  1  1  0  0  0  0  1  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . P . . . P
P P P . P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . P . . . P
P P P . P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13886aad68>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  294
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  1 7 0 5  at:  965
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  0 6 0 5  at:  389
count:  13
inserting:  6 5 6 4  at:  3444
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  5 6 5 4  at:  2988
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
inserting:  0 6 0 4  at:  388
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00100215]
MCTS.py==>search  returning value of canonical board -v:  [0.00100215]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  1107
ChessGame==>getNextState  param action number:  1107 self.n*self.n:  64
selected action:  2 1 2 3
MOVE:  c2c4
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  c2c4
MOOOVOVOEOEaaaa:  26
position:  c2c4
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . P . . . . .
. . . . . . . P
P P . P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . P . . . . .
. . . . . . . P
P P . P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  1107 next_s:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . P . . . . .
. . . . . . . P
P P . P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  0  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . P . . . . .
. . . . . . . P
P P . P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . P . . . . .
. . . . . . . P
P P . P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880a0ef0>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  294
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  1 7 0 5  at:  965
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  0 6 0 5  at:  389
count:  13
inserting:  6 5 6 4  at:  3444
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  5 6 5 4  at:  2988
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
inserting:  0 6 0 4  at:  388
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00842065]
MCTS.py==>search  returning value of canonical board -v:  [0.00842065]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  3186
ChessGame==>getNextState  param action number:  3186 self.n*self.n:  64
selected action:  6 1 6 2
MOVE:  g2g3
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  g2g3
MOOOVOVOEOEaaaa:  22
position:  g2g3
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . . P P
P P P P P P . .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . . P P
P P P P P P . .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  3186 next_s:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . . P P
P P P P P P . .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . . P P
P P P P P P . .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . . P P
P P P P P P . .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388058e80>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  294
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  1 7 0 5  at:  965
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  0 6 0 5  at:  389
count:  13
inserting:  6 5 6 4  at:  3444
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  5 6 5 4  at:  2988
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
inserting:  0 6 0 4  at:  388
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00894777]
MCTS.py==>search  returning value of canonical board -v:  [0.00894777]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  3187
ChessGame==>getNextState  param action number:  3187 self.n*self.n:  64
selected action:  6 1 6 3
MOVE:  g2g4
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  g2g4
MOOOVOVOEOEaaaa:  30
position:  g2g4
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . P .
. . . . . . . P
P P P P P P . .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . P .
. . . . . . . P
P P P P P P . .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  3187 next_s:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . P .
. . . . . . . P
P P P P P P . .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  0  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . P .
. . . . . . . P
P P P P P P . .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . P .
. . . . . . . P
P P P P P P . .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880a0860>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  294
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  1 7 0 5  at:  965
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  0 6 0 5  at:  389
count:  13
inserting:  6 5 6 4  at:  3444
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  5 6 5 4  at:  2988
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
inserting:  0 6 0 4  at:  388
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00617128]
MCTS.py==>search  returning value of canonical board -v:  [0.00617128]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2666
ChessGame==>getNextState  param action number:  2666 self.n*self.n:  64
selected action:  5 1 5 2
MOVE:  f2f3
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  f2f3
MOOOVOVOEOEaaaa:  21
position:  f2f3
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . P . P
P P P P P . P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . P . P
P P P P P . P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  2666 next_s:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . P . P
P P P P P . P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  0  0  0  0  0  0  1  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . P . P
P P P P P . P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . P . P
P P P P P . P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880582e8>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  294
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  1 7 0 5  at:  965
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  0 6 0 5  at:  389
count:  13
inserting:  6 5 6 4  at:  3444
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  5 6 5 4  at:  2988
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
inserting:  0 6 0 4  at:  388
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00874421]
MCTS.py==>search  returning value of canonical board -v:  [0.00874421]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2667
ChessGame==>getNextState  param action number:  2667 self.n*self.n:  64
selected action:  5 1 5 3
MOVE:  f2f4
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  f2f4
MOOOVOVOEOEaaaa:  29
position:  f2f4
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . P . .
. . . . . . . P
P P P P P . P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . P . .
. . . . . . . P
P P P P P . P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  2667 next_s:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . P . .
. . . . . . . P
P P P P P . P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . P . .
. . . . . . . P
P P P P P . P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . P . .
. . . . . . . P
P P P P P . P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388082f28>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  294
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  1 7 0 5  at:  965
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  0 6 0 5  at:  389
count:  13
inserting:  6 5 6 4  at:  3444
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  5 6 5 4  at:  2988
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
inserting:  0 6 0 4  at:  388
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00777267]
MCTS.py==>search  returning value of canonical board -v:  [0.00777267]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2147
ChessGame==>getNextState  param action number:  2147 self.n*self.n:  64
selected action:  4 1 4 3
MOVE:  e2e4
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  e2e4
MOOOVOVOEOEaaaa:  28
position:  e2e4
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . P . . .
. . . . . . . P
P P P P . P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . P . . .
. . . . . . . P
P P P P . P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  2147 next_s:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . P . . .
. . . . . . . P
P P P P . P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . P . . .
. . . . . . . P
P P P P . P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . P . . .
. . . . . . . P
P P P P . P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388058048>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  294
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  1 7 0 5  at:  965
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  0 6 0 5  at:  389
count:  13
inserting:  6 5 6 4  at:  3444
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  5 6 5 4  at:  2988
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
inserting:  0 6 0 4  at:  388
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01134838]
MCTS.py==>search  returning value of canonical board -v:  [0.01134838]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>getActionProb self.game.stringRepresentation(canonicalBoard)  s:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>getActionProb returns: probs  counts:  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] probs:  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Coach.py ==>executeEpisode  action:  67
ChessGame==>getNextState  param action number:  67 self.n*self.n:  64
selected action:  0 1 0 3
MOVE:  a2a4
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
. . . . . . . .
. . . . . . . P
P P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  a2a4
MOOOVOVOEOEaaaa:  24
position:  a2a4
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
FINAL SELECTED MOVE NEW BOARD:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  -1
Coach.py ==>executeEpisode  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R self.curPlayer:  -1
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  -1
Coach.py ==>executeEpisode  canonicalBoard:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  388
ChessGame==>getNextState  param action number:  388 self.n*self.n:  64
selected action:  0 6 0 4
MOVE:  a7a5
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  a7a5
MOOOVOVOEOEaaaa:  32
position:  a7a5
board:  r n b q k b n r
. p p p p p . p
. . . . . . p .
p . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
. . . . . . p .
p . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  388 next_s:  r n b q k b n r
. p p p p p . p
. . . . . . p .
p . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
. . . . . . p .
p . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p p . p
. . . . . . p .
p . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880a0198>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  0 0 0 2  at:  2
count:  5
inserting:  0 0 0 1  at:  1
count:  6
inserting:  7 2 7 3  at:  3771
count:  7
inserting:  6 1 6 2  at:  3186
count:  8
inserting:  5 1 5 2  at:  2666
count:  9
inserting:  4 1 4 2  at:  2146
count:  10
inserting:  3 1 3 2  at:  1626
count:  11
inserting:  2 1 2 2  at:  1106
count:  12
inserting:  1 1 1 2  at:  586
count:  13
inserting:  6 1 6 3  at:  3187
count:  14
inserting:  5 1 5 3  at:  2667
count:  15
inserting:  4 1 4 3  at:  2147
count:  16
inserting:  3 1 3 3  at:  1627
count:  17
inserting:  2 1 2 3  at:  1107
count:  18
inserting:  1 1 1 3  at:  587
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 1 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 1 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00839883]
MCTS.py==>search  returning value of canonical board -v:  [0.00839883]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  965
ChessGame==>getNextState  param action number:  965 self.n*self.n:  64
selected action:  1 7 0 5
MOVE:  b8a6
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  b8a6
position:  b8a6
board:  r . b q k b n r
p p p p p p . p
n . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r . b q k b n r
p p p p p p . p
n . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  965 next_s:  r . b q k b n r
p p p p p p . p
n . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -2  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4  0 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r . b q k b n r
p p p p p p . p
n . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r . b q k b n r
p p p p p p . p
n . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388082d30>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  0 0 0 2  at:  2
count:  5
inserting:  0 0 0 1  at:  1
count:  6
inserting:  0 3 0 4  at:  196
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 1 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 1 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.0076352]
MCTS.py==>search  returning value of canonical board -v:  [0.0076352]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2468
ChessGame==>getNextState  param action number:  2468 self.n*self.n:  64
selected action:  4 6 4 4
MOVE:  e7e5
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  e7e5
MOOOVOVOEOEaaaa:  36
position:  e7e5
board:  r n b q k b n r
p p p p . p . p
. . . . . . p .
. . . . p . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p . p . p
. . . . . . p .
. . . . p . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  2468 next_s:  r n b q k b n r
p p p p . p . p
. . . . . . p .
. . . . p . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1  0 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p . p . p
. . . . . . p .
. . . . p . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p . p . p
. . . . . . p .
. . . . p . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388082358>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  0 0 0 2  at:  2
count:  5
inserting:  0 0 0 1  at:  1
count:  6
inserting:  0 3 0 4  at:  196
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 1 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 1 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00117527]
MCTS.py==>search  returning value of canonical board -v:  [0.00117527]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  389
ChessGame==>getNextState  param action number:  389 self.n*self.n:  64
selected action:  0 6 0 5
MOVE:  a7a6
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  a7a6
MOOOVOVOEOEaaaa:  40
position:  a7a6
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  389 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388094c18>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  0 0 0 2  at:  2
count:  5
inserting:  0 0 0 1  at:  1
count:  6
inserting:  0 3 0 4  at:  196
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 1 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 1 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00891663]
MCTS.py==>search  returning value of canonical board -v:  [0.00891663]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2989
ChessGame==>getNextState  param action number:  2989 self.n*self.n:  64
selected action:  5 6 5 5
MOVE:  f7f6
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  f7f6
MOOOVOVOEOEaaaa:  45
position:  f7f6
board:  r n b q k b n r
p p p p p . . p
. . . . . p p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p . . p
. . . . . p p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  2989 next_s:  r n b q k b n r
p p p p p . . p
. . . . . p p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1 -1  0
 -1 -1 -1 -1 -1  0  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p . . p
. . . . . p p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p p . . p
. . . . . p p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388082390>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  0 0 0 2  at:  2
count:  5
inserting:  0 0 0 1  at:  1
count:  6
inserting:  0 3 0 4  at:  196
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 1 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 1 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00709193]
MCTS.py==>search  returning value of canonical board -v:  [0.00709193]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  1428
ChessGame==>getNextState  param action number:  1428 self.n*self.n:  64
selected action:  2 6 2 4
MOVE:  c7c5
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  c7c5
MOOOVOVOEOEaaaa:  34
position:  c7c5
board:  r n b q k b n r
p p . p p p . p
. . . . . . p .
. . p . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p . p p p . p
. . . . . . p .
. . p . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  1428 next_s:  r n b q k b n r
p p . p p p . p
. . . . . . p .
. . p . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1  0 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p . p p p . p
. . . . . . p .
. . p . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p . p p p . p
. . . . . . p .
. . p . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f138809bcc0>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  0 0 0 2  at:  2
count:  5
inserting:  0 0 0 1  at:  1
count:  6
inserting:  0 3 0 4  at:  196
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 1 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 1 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00560039]
MCTS.py==>search  returning value of canonical board -v:  [0.00560039]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  4028
ChessGame==>getNextState  param action number:  4028 self.n*self.n:  64
selected action:  7 6 7 4
MOVE:  h7h5
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  h7h5
MOOOVOVOEOEaaaa:  39
position:  h7h5
board:  r n b q k b n r
p p p p p p . .
. . . . . . p .
. . . . . . . p
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p . .
. . . . . . p .
. . . . . . . p
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  4028 next_s:  r n b q k b n r
p p p p p p . .
. . . . . . p .
. . . . . . . p
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0  0 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p . .
. . . . . . p .
. . . . . . . p
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p p p . .
. . . . . . p .
. . . . . . . p
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880594a8>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  0 0 0 2  at:  2
count:  5
inserting:  0 0 0 1  at:  1
count:  6
inserting:  0 3 0 4  at:  196
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 1 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 1 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00796276]
MCTS.py==>search  returning value of canonical board -v:  [0.00796276]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2469
ChessGame==>getNextState  param action number:  2469 self.n*self.n:  64
selected action:  4 6 4 5
MOVE:  e7e6
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  e7e6
MOOOVOVOEOEaaaa:  44
position:  e7e6
board:  r n b q k b n r
p p p p . p . p
. . . . p . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p . p . p
. . . . p . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  2469 next_s:  r n b q k b n r
p p p p . p . p
. . . . p . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0 -1  0
 -1 -1 -1 -1  0 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p . p . p
. . . . p . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p . p . p
. . . . p . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388064198>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  0 0 0 2  at:  2
count:  5
inserting:  0 0 0 1  at:  1
count:  6
inserting:  0 3 0 4  at:  196
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 1 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 1 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00628056]
MCTS.py==>search  returning value of canonical board -v:  [0.00628056]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  3444
ChessGame==>getNextState  param action number:  3444 self.n*self.n:  64
selected action:  6 5 6 4
MOVE:  g6g5
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  g6g5
MOOOVOVOEOEaaaa:  38
position:  g6g5
board:  r n b q k b n r
p p p p p p . p
. . . . . . . .
. . . . . . p .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . . .
. . . . . . p .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  3444 next_s:  r n b q k b n r
p p p p p p . p
. . . . . . . .
. . . . . . p .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . . .
. . . . . . p .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . . .
. . . . . . p .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388059588>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  0 0 0 2  at:  2
count:  5
inserting:  0 0 0 1  at:  1
count:  6
inserting:  0 3 0 4  at:  196
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 1 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 1 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00877308]
MCTS.py==>search  returning value of canonical board -v:  [0.00877308]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  1429
ChessGame==>getNextState  param action number:  1429 self.n*self.n:  64
selected action:  2 6 2 5
MOVE:  c7c6
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  c7c6
MOOOVOVOEOEaaaa:  42
position:  c7c6
board:  r n b q k b n r
p p . p p p . p
. . p . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p . p p p . p
. . p . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  1429 next_s:  r n b q k b n r
p p . p p p . p
. . p . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0 -1  0
 -1 -1  0 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p . p p p . p
. . p . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p . p p p . p
. . p . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f138809bc18>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  0 0 0 2  at:  2
count:  5
inserting:  0 0 0 1  at:  1
count:  6
inserting:  0 3 0 4  at:  196
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 1 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 1 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01007723]
MCTS.py==>search  returning value of canonical board -v:  [0.01007723]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  1949
ChessGame==>getNextState  param action number:  1949 self.n*self.n:  64
selected action:  3 6 3 5
MOVE:  d7d6
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  d7d6
MOOOVOVOEOEaaaa:  43
position:  d7d6
board:  r n b q k b n r
p p p . p p . p
. . . p . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p . p p . p
. . . p . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  1949 next_s:  r n b q k b n r
p p p . p p . p
. . . p . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0
 -1 -1 -1  0 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p . p p . p
. . . p . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p . p p . p
. . . p . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13882b4f98>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  0 0 0 2  at:  2
count:  5
inserting:  0 0 0 1  at:  1
count:  6
inserting:  0 3 0 4  at:  196
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 1 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 1 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00878805]
MCTS.py==>search  returning value of canonical board -v:  [0.00878805]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  3069
ChessGame==>getNextState  param action number:  3069 self.n*self.n:  64
selected action:  5 7 7 5
MOVE:  f8h6
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  f8h6
position:  f8h6
board:  r n b q k . n r
p p p p p p . p
. . . . . . p b
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k . n r
p p p p p p . p
. . . . . . p b
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  3069 next_s:  r n b q k . n r
p p p p p p . p
. . . . . . p b
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1 -3
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6  0 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k . n r
p p p p p p . p
. . . . . . p b
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k . n r
p p p p p p . p
. . . . . . p b
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880593c8>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  0 0 0 2  at:  2
count:  5
inserting:  0 0 0 1  at:  1
count:  6
inserting:  0 3 0 4  at:  196
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 1 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 1 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00847479]
MCTS.py==>search  returning value of canonical board -v:  [0.00847479]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2988
ChessGame==>getNextState  param action number:  2988 self.n*self.n:  64
selected action:  5 6 5 4
MOVE:  f7f5
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  f7f5
MOOOVOVOEOEaaaa:  37
position:  f7f5
board:  r n b q k b n r
p p p p p . . p
. . . . . . p .
. . . . . p . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p . . p
. . . . . . p .
. . . . . p . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  2988 next_s:  r n b q k b n r
p p p p p . . p
. . . . . . p .
. . . . . p . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1  0  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p . . p
. . . . . . p .
. . . . . p . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p p p p p . . p
. . . . . . p .
. . . . . p . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880c67f0>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  0 0 0 2  at:  2
count:  5
inserting:  0 0 0 1  at:  1
count:  6
inserting:  0 3 0 4  at:  196
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 1 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 1 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00713527]
MCTS.py==>search  returning value of canonical board -v:  [0.00713527]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  908
ChessGame==>getNextState  param action number:  908 self.n*self.n:  64
selected action:  1 6 1 4
MOVE:  b7b5
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  b7b5
MOOOVOVOEOEaaaa:  33
position:  b7b5
board:  r n b q k b n r
p . p p p p . p
. . . . . . p .
. p . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p . p p p p . p
. . . . . . p .
. p . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  908 next_s:  r n b q k b n r
p . p p p p . p
. . . . . . p .
. p . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1  0 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p . p p p p . p
. . . . . . p .
. p . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
p . p p p p . p
. . . . . . p .
. p . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880a0fd0>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  294
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  0 0 0 2  at:  2
count:  5
inserting:  0 0 0 1  at:  1
count:  6
inserting:  0 3 1 4  at:  204
count:  7
inserting:  0 3 0 4  at:  196
count:  8
inserting:  7 2 7 3  at:  3771
count:  9
inserting:  6 1 6 2  at:  3186
count:  10
inserting:  5 1 5 2  at:  2666
count:  11
inserting:  4 1 4 2  at:  2146
count:  12
inserting:  3 1 3 2  at:  1626
count:  13
inserting:  2 1 2 2  at:  1106
count:  14
inserting:  1 1 1 2  at:  586
count:  15
inserting:  6 1 6 3  at:  3187
count:  16
inserting:  5 1 5 3  at:  2667
count:  17
inserting:  4 1 4 3  at:  2147
count:  18
inserting:  3 1 3 3  at:  1627
count:  19
inserting:  2 1 2 3  at:  1107
count:  20
inserting:  1 1 1 3  at:  587
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 1 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 1 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00736472]
MCTS.py==>search  returning value of canonical board -v:  [0.00736472]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  3565
ChessGame==>getNextState  param action number:  3565 self.n*self.n:  64
selected action:  6 7 5 5
MOVE:  g8f6
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  g8f6
position:  g8f6
board:  r n b q k b . r
p p p p p p . p
. . . . . n p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b . r
p p p p p p . p
. . . . . n p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  3565 next_s:  r n b q k b . r
p p p p p p . p
. . . . . n p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -2 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3  0 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b . r
p p p p p p . p
. . . . . n p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b . r
p p p p p p . p
. . . . . n p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880586d8>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  0 0 0 2  at:  2
count:  5
inserting:  0 0 0 1  at:  1
count:  6
inserting:  0 3 0 4  at:  196
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 1 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 1 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00505224]
MCTS.py==>search  returning value of canonical board -v:  [0.00505224]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>getActionProb self.game.stringRepresentation(canonicalBoard)  s:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>getActionProb returns: probs  counts:  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] probs:  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Coach.py ==>executeEpisode  action:  389
ChessGame==>getNextState  param action number:  389 self.n*self.n:  64
selected action:  0 6 0 5
MOVE:  a7a6
board:  r n b q k b n r
p p p p p p . p
. . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  a7a6
MOOOVOVOEOEaaaa:  40
position:  a7a6
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
FINAL SELECTED MOVE NEW BOARD:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
Coach.py ==>executeEpisode  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R self.curPlayer:  1
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
Coach.py ==>executeEpisode  canonicalBoard:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  1
ChessGame==>getNextState  param action number:  1 self.n*self.n:  64
selected action:  0 0 0 1
MOVE:  a1a2
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  a1a2
position:  a1a2
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
R P P P P P P .
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
R P P P P P P .
. N B Q K B N R player:  -1
MCTS.py==>search  best_act:  1 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
R P P P P P P .
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  4  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
R P P P P P P .
. N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
R P P P P P P .
. N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388064630>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 7 0 6  at:  454
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  6 5 6 4  at:  3444
count:  13
inserting:  0 5 0 4  at:  324
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  5 6 5 4  at:  2988
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01012853]
MCTS.py==>search  returning value of canonical board -v:  [0.01012853]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  1106
ChessGame==>getNextState  param action number:  1106 self.n*self.n:  64
selected action:  2 1 2 2
MOVE:  c2c3
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  c2c3
MOOOVOVOEOEaaaa:  18
position:  c2c3
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . P . . . . P
. P . P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . P . . . . P
. P . P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  1106 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . P . . . . P
. P . P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  0  1  1  1  1  0  0  0  1  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . P . . . . P
. P . P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . P . . . . P
. P . P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388059390>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 7 0 6  at:  454
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  6 5 6 4  at:  3444
count:  13
inserting:  0 5 0 4  at:  324
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  5 6 5 4  at:  2988
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01001354]
MCTS.py==>search  returning value of canonical board -v:  [0.01001354]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  3771
ChessGame==>getNextState  param action number:  3771 self.n*self.n:  64
selected action:  7 2 7 3
MOVE:  h3h4
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  h3h4
MOOOVOVOEOEaaaa:  31
position:  h3h4
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . P
. . . . . . . .
. P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . P
. . . . . . . .
. P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  3771 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . P
. . . . . . . .
. P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  0
  1  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . P
. . . . . . . .
. P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . P
. . . . . . . .
. P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388059400>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 7 0 6  at:  454
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  6 5 6 4  at:  3444
count:  13
inserting:  0 5 0 4  at:  324
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  5 6 5 4  at:  2988
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01073284]
MCTS.py==>search  returning value of canonical board -v:  [0.01073284]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  3114
ChessGame==>getNextState  param action number:  3114 self.n*self.n:  64
selected action:  6 0 5 2
MOVE:  g1f3
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  g1f3
position:  g1f3
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . N . P
. P P P P P P .
R N B Q K B . R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . N . P
. P P P P P P .
R N B Q K B . R player:  -1
MCTS.py==>search  best_act:  3114 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . N . P
. P P P P P P .
R N B Q K B . R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  0  4  0  1  1  1  1  1  1  0  0  0  0  0  0  2  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . N . P
. P P P P P P .
R N B Q K B . R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . N . P
. P P P P P P .
R N B Q K B . R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388058860>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 7 0 6  at:  454
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  6 5 6 4  at:  3444
count:  13
inserting:  0 5 0 4  at:  324
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  5 6 5 4  at:  2988
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00876319]
MCTS.py==>search  returning value of canonical board -v:  [0.00876319]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2146
ChessGame==>getNextState  param action number:  2146 self.n*self.n:  64
selected action:  4 1 4 2
MOVE:  e2e3
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  e2e3
MOOOVOVOEOEaaaa:  20
position:  e2e3
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . P . . P
. P P P . P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . P . . P
. P P P . P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  2146 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . P . . P
. P P P . P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  0  1  1  0  0  0  0  0  1  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . P . . P
. P P P . P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . P . . P
. P P P . P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388058198>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 7 0 6  at:  454
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  6 5 6 4  at:  3444
count:  13
inserting:  0 5 0 4  at:  324
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  5 6 5 4  at:  2988
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.0103081]
MCTS.py==>search  returning value of canonical board -v:  [0.0103081]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2
ChessGame==>getNextState  param action number:  2 self.n*self.n:  64
selected action:  0 0 0 2
MOVE:  a1a3
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  a1a3
position:  a1a3
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
R . . . . . . P
. P P P P P P .
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
R . . . . . . P
. P P P P P P .
. N B Q K B N R player:  -1
MCTS.py==>search  best_act:  2 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
R . . . . . . P
. P P P P P P .
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  4  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
R . . . . . . P
. P P P P P P .
. N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
R . . . . . . P
. P P P P P P .
. N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f138809b710>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 7 0 6  at:  454
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  6 5 6 4  at:  3444
count:  13
inserting:  0 5 0 4  at:  324
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  5 6 5 4  at:  2988
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00624037]
MCTS.py==>search  returning value of canonical board -v:  [0.00624037]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  196
ChessGame==>getNextState  param action number:  196 self.n*self.n:  64
selected action:  0 3 0 4
MOVE:  a4a5
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  a4a5
MOOOVOVOEOEaaaa:  32
position:  a4a5
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  196 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880942e8>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 7 0 6  at:  454
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  6 5 6 4  at:  3444
count:  13
inserting:  7 6 7 4  at:  4028
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00712602]
MCTS.py==>search  returning value of canonical board -v:  [0.00712602]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  587
ChessGame==>getNextState  param action number:  587 self.n*self.n:  64
selected action:  1 1 1 3
MOVE:  b2b4
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  b2b4
MOOOVOVOEOEaaaa:  25
position:  b2b4
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P P . . . . . .
. . . . . . . P
. . P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P P . . . . . .
. . . . . . . P
. . P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  587 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P P . . . . . .
. . . . . . . P
. . P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  0  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P P . . . . . .
. . . . . . . P
. . P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P P . . . . . .
. . . . . . . P
. . P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388094c18>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 7 0 6  at:  454
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  6 5 6 4  at:  3444
count:  13
inserting:  0 5 0 4  at:  324
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  5 6 5 4  at:  2988
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00991254]
MCTS.py==>search  returning value of canonical board -v:  [0.00991254]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  1626
ChessGame==>getNextState  param action number:  1626 self.n*self.n:  64
selected action:  3 1 3 2
MOVE:  d2d3
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  d2d3
MOOOVOVOEOEaaaa:  19
position:  d2d3
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . P . . . P
. P P . P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . P . . . P
. P P . P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  1626 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . P . . . P
. P P . P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  0  1  1  1  0  0  0  0  1  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . P . . . P
. P P . P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . P . . . P
. P P . P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880646a0>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 7 0 6  at:  454
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  6 5 6 4  at:  3444
count:  13
inserting:  0 5 0 4  at:  324
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  5 6 5 4  at:  2988
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00052415]
MCTS.py==>search  returning value of canonical board -v:  [0.00052415]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  3186
ChessGame==>getNextState  param action number:  3186 self.n*self.n:  64
selected action:  6 1 6 2
MOVE:  g2g3
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  g2g3
MOOOVOVOEOEaaaa:  22
position:  g2g3
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . P P
. P P P P P . .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . P P
. P P P P P . .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  3186 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . P P
. P P P P P . .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  0  0  0  0  0  0  0  0  1  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . P P
. P P P P P . .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . P P
. P P P P P . .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388082a20>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 7 0 6  at:  454
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  6 5 6 4  at:  3444
count:  13
inserting:  0 5 0 4  at:  324
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  5 6 5 4  at:  2988
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00742094]
MCTS.py==>search  returning value of canonical board -v:  [0.00742094]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  3187
ChessGame==>getNextState  param action number:  3187 self.n*self.n:  64
selected action:  6 1 6 3
MOVE:  g2g4
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  g2g4
MOOOVOVOEOEaaaa:  30
position:  g2g4
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . P .
. . . . . . . P
. P P P P P . .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . P .
. . . . . . . P
. P P P P P . .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  3187 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . P .
. . . . . . . P
. P P P P P . .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  0  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . P .
. . . . . . . P
. P P P P P . .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . P .
. . . . . . . P
. P P P P P . .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f138809bd68>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 7 0 6  at:  454
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  6 5 6 4  at:  3444
count:  13
inserting:  0 5 0 4  at:  324
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  5 6 5 4  at:  2988
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00597389]
MCTS.py==>search  returning value of canonical board -v:  [0.00597389]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  1107
ChessGame==>getNextState  param action number:  1107 self.n*self.n:  64
selected action:  2 1 2 3
MOVE:  c2c4
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  c2c4
MOOOVOVOEOEaaaa:  26
position:  c2c4
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . P . . . . .
. . . . . . . P
. P . P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . P . . . . .
. . . . . . . P
. P . P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  1107 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . P . . . . .
. . . . . . . P
. P . P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  0  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . P . . . . .
. . . . . . . P
. P . P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . P . . . . .
. . . . . . . P
. P . P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13b668e4e0>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 7 0 6  at:  454
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  6 5 6 4  at:  3444
count:  13
inserting:  0 5 0 4  at:  324
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  5 6 5 4  at:  2988
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00907983]
MCTS.py==>search  returning value of canonical board -v:  [0.00907983]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  514
ChessGame==>getNextState  param action number:  514 self.n*self.n:  64
selected action:  1 0 0 2
MOVE:  b1a3
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  b1a3
position:  b1a3
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  -1
MCTS.py==>search  best_act:  514 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880a0710>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 7 0 6  at:  454
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  6 5 6 4  at:  3444
count:  13
inserting:  0 5 0 4  at:  324
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  5 6 5 4  at:  2988
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01287644]
MCTS.py==>search  returning value of canonical board -v:  [0.01287644]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2666
ChessGame==>getNextState  param action number:  2666 self.n*self.n:  64
selected action:  5 1 5 2
MOVE:  f2f3
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  f2f3
MOOOVOVOEOEaaaa:  21
position:  f2f3
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . P . P
. P P P P . P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . P . P
. P P P P . P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  2666 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . P . P
. P P P P . P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  0  1  0  0  0  0  0  0  1  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . P . P
. P P P P . P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . P . P
. P P P P . P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880c67f0>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 7 0 6  at:  454
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  6 5 6 4  at:  3444
count:  13
inserting:  0 5 0 4  at:  324
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  5 6 5 4  at:  2988
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00817562]
MCTS.py==>search  returning value of canonical board -v:  [0.00817562]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2147
ChessGame==>getNextState  param action number:  2147 self.n*self.n:  64
selected action:  4 1 4 3
MOVE:  e2e4
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  e2e4
MOOOVOVOEOEaaaa:  28
position:  e2e4
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . P . . .
. . . . . . . P
. P P P . P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . P . . .
. . . . . . . P
. P P P . P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  2147 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . P . . .
. . . . . . . P
. P P P . P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  0  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . P . . .
. . . . . . . P
. P P P . P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . P . . .
. . . . . . . P
. P P P . P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388059400>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 7 0 6  at:  454
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  6 5 6 4  at:  3444
count:  13
inserting:  0 5 0 4  at:  324
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  5 6 5 4  at:  2988
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01034191]
MCTS.py==>search  returning value of canonical board -v:  [0.01034191]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>getActionProb self.game.stringRepresentation(canonicalBoard)  s:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>getActionProb returns: probs  counts:  [0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] probs:  [0.0, 0.06666666666666667, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Coach.py ==>executeEpisode  action:  196
ChessGame==>getNextState  param action number:  196 self.n*self.n:  64
selected action:  0 3 0 4
MOVE:  a4a5
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
. . . . . . . .
P . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  a4a5
MOOOVOVOEOEaaaa:  32
position:  a4a5
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
FINAL SELECTED MOVE NEW BOARD:  r n b q k b n r
. p p p p p . p
p . . . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  -1
Coach.py ==>executeEpisode  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R self.curPlayer:  -1
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  -1
Coach.py ==>executeEpisode  canonicalBoard:  r n b q k b n r
. p p p p p . p
p . . . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  454
ChessGame==>getNextState  param action number:  454 self.n*self.n:  64
selected action:  0 7 0 6
MOVE:  a8a7
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  a8a7
position:  a8a7
board:  . n b q k b n r
r p p p p p . p
p . . . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  454 next_s:  . n b q k b n r
r p p p p p . p
p . . . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388059860>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  0 0 0 3  at:  3
count:  5
inserting:  0 0 0 2  at:  2
count:  6
inserting:  0 0 0 1  at:  1
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 1 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 1 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00753811]
MCTS.py==>search  returning value of canonical board -v:  [0.00753811]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2468
ChessGame==>getNextState  param action number:  2468 self.n*self.n:  64
selected action:  4 6 4 4
MOVE:  e7e5
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  e7e5
MOOOVOVOEOEaaaa:  36
position:  e7e5
board:  r n b q k b n r
. p p p . p . p
p . . . . . p .
P . . . p . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p . p . p
p . . . . . p .
P . . . p . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  2468 next_s:  r n b q k b n r
. p p p . p . p
p . . . . . p .
P . . . p . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0 -1  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1  0 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p . p . p
p . . . . . p .
P . . . p . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p . p . p
p . . . . . p .
P . . . p . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13b668e4e0>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  0 0 0 3  at:  3
count:  5
inserting:  0 0 0 2  at:  2
count:  6
inserting:  0 0 0 1  at:  1
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 1 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 1 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [0.0006344]
MCTS.py==>search  returning value of canonical board -v:  [-0.0006344]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2989
ChessGame==>getNextState  param action number:  2989 self.n*self.n:  64
selected action:  5 6 5 5
MOVE:  f7f6
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  f7f6
MOOOVOVOEOEaaaa:  45
position:  f7f6
board:  r n b q k b n r
. p p p p . . p
p . . . . p p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p . . p
p . . . . p p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  2989 next_s:  r n b q k b n r
. p p p p . . p
p . . . . p p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0 -1  0  0  0  0 -1 -1  0
  0 -1 -1 -1 -1  0  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p . . p
p . . . . p p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p . . p
p . . . . p p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388059208>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  0 0 0 3  at:  3
count:  5
inserting:  0 0 0 2  at:  2
count:  6
inserting:  0 0 0 1  at:  1
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 1 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 1 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00559672]
MCTS.py==>search  returning value of canonical board -v:  [0.00559672]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  1428
ChessGame==>getNextState  param action number:  1428 self.n*self.n:  64
selected action:  2 6 2 4
MOVE:  c7c5
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  c7c5
MOOOVOVOEOEaaaa:  34
position:  c7c5
board:  r n b q k b n r
. p . p p p . p
p . . . . . p .
P . p . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p . p p p . p
p . . . . . p .
P . p . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  1428 next_s:  r n b q k b n r
. p . p p p . p
p . . . . . p .
P . p . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0 -1  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1  0 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p . p p p . p
p . . . . . p .
P . p . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p . p p p . p
p . . . . . p .
P . p . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388058358>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  0 0 0 3  at:  3
count:  5
inserting:  0 0 0 2  at:  2
count:  6
inserting:  0 0 0 1  at:  1
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 1 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 1 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00410052]
MCTS.py==>search  returning value of canonical board -v:  [0.00410052]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  4028
ChessGame==>getNextState  param action number:  4028 self.n*self.n:  64
selected action:  7 6 7 4
MOVE:  h7h5
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  h7h5
MOOOVOVOEOEaaaa:  39
position:  h7h5
board:  r n b q k b n r
. p p p p p . .
p . . . . . p .
P . . . . . . p
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . .
p . . . . . p .
P . . . . . . p
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  4028 next_s:  r n b q k b n r
. p p p p p . .
p . . . . . p .
P . . . . . . p
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0 -1 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0  0 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . .
p . . . . . p .
P . . . . . . p
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p p . .
p . . . . . p .
P . . . . . . p
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388059cf8>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  0 0 0 3  at:  3
count:  5
inserting:  0 0 0 2  at:  2
count:  6
inserting:  0 0 0 1  at:  1
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 1 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 1 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.0055699]
MCTS.py==>search  returning value of canonical board -v:  [0.0055699]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2469
ChessGame==>getNextState  param action number:  2469 self.n*self.n:  64
selected action:  4 6 4 5
MOVE:  e7e6
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  e7e6
MOOOVOVOEOEaaaa:  44
position:  e7e6
board:  r n b q k b n r
. p p p . p . p
p . . . p . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p . p . p
p . . . p . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  2469 next_s:  r n b q k b n r
. p p p . p . p
p . . . p . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0 -1  0  0  0 -1  0 -1  0
  0 -1 -1 -1  0 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p . p . p
p . . . p . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p . p . p
p . . . p . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f138809bf28>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  0 0 0 3  at:  3
count:  5
inserting:  0 0 0 2  at:  2
count:  6
inserting:  0 0 0 1  at:  1
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 1 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 1 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00428896]
MCTS.py==>search  returning value of canonical board -v:  [0.00428896]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  3444
ChessGame==>getNextState  param action number:  3444 self.n*self.n:  64
selected action:  6 5 6 4
MOVE:  g6g5
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  g6g5
MOOOVOVOEOEaaaa:  38
position:  g6g5
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  3444 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388094e10>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  0 0 0 3  at:  3
count:  5
inserting:  0 0 0 2  at:  2
count:  6
inserting:  0 0 0 1  at:  1
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 1 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 1 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.0068622]
MCTS.py==>search  returning value of canonical board -v:  [0.0068622]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  1429
ChessGame==>getNextState  param action number:  1429 self.n*self.n:  64
selected action:  2 6 2 5
MOVE:  c7c6
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  c7c6
MOOOVOVOEOEaaaa:  42
position:  c7c6
board:  r n b q k b n r
. p . p p p . p
p . p . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p . p p p . p
p . p . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  1429 next_s:  r n b q k b n r
. p . p p p . p
p . p . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0 -1  0 -1  0  0  0 -1  0
  0 -1  0 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p . p p p . p
p . p . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p . p p p . p
p . p . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388082fd0>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  0 0 0 3  at:  3
count:  5
inserting:  0 0 0 2  at:  2
count:  6
inserting:  0 0 0 1  at:  1
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 1 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 1 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00754817]
MCTS.py==>search  returning value of canonical board -v:  [0.00754817]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  3069
ChessGame==>getNextState  param action number:  3069 self.n*self.n:  64
selected action:  5 7 7 5
MOVE:  f8h6
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  f8h6
position:  f8h6
board:  r n b q k . n r
. p p p p p . p
p . . . . . p b
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k . n r
. p p p p p . p
p . . . . . p b
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  3069 next_s:  r n b q k . n r
. p p p p p . p
p . . . . . p b
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1 -3
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6  0 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k . n r
. p p p p p . p
p . . . . . p b
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k . n r
. p p p p p . p
p . . . . . p b
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388064c18>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  0 0 0 3  at:  3
count:  5
inserting:  0 0 0 2  at:  2
count:  6
inserting:  0 0 0 1  at:  1
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 1 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 1 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00618285]
MCTS.py==>search  returning value of canonical board -v:  [0.00618285]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2988
ChessGame==>getNextState  param action number:  2988 self.n*self.n:  64
selected action:  5 6 5 4
MOVE:  f7f5
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  f7f5
MOOOVOVOEOEaaaa:  37
position:  f7f5
board:  r n b q k b n r
. p p p p . . p
p . . . . . p .
P . . . . p . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p . . p
p . . . . . p .
P . . . . p . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  2988 next_s:  r n b q k b n r
. p p p p . . p
p . . . . . p .
P . . . . p . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0 -1  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1  0  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p . . p
p . . . . . p .
P . . . . p . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p . . p
p . . . . . p .
P . . . . p . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388064c88>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  0 0 0 3  at:  3
count:  5
inserting:  0 0 0 2  at:  2
count:  6
inserting:  0 0 0 1  at:  1
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 1 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 1 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00518683]
MCTS.py==>search  returning value of canonical board -v:  [0.00518683]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  908
ChessGame==>getNextState  param action number:  908 self.n*self.n:  64
selected action:  1 6 1 4
MOVE:  b7b5
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  b7b5
MOOOVOVOEOEaaaa:  33
position:  b7b5
board:  r n b q k b n r
. . p p p p . p
p . . . . . p .
P p . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. . p p p p . p
p . . . . . p .
P p . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  908 next_s:  r n b q k b n r
. . p p p p . p
p . . . . . p .
P p . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1 -1  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0  0 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. . p p p p . p
p . . . . . p .
P p . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. . p p p p . p
p . . . . . p .
P p . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388082ba8>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  294
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  0 0 0 3  at:  3
count:  5
inserting:  0 0 0 2  at:  2
count:  6
inserting:  0 0 0 1  at:  1
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
inserting:  0 4 1 5  at:  269
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 1 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 1 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00703579]
MCTS.py==>search  returning value of canonical board -v:  [0.00703579]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  3565
ChessGame==>getNextState  param action number:  3565 self.n*self.n:  64
selected action:  6 7 5 5
MOVE:  g8f6
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  g8f6
position:  g8f6
board:  r n b q k b . r
. p p p p p . p
p . . . . n p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b . r
. p p p p p . p
p . . . . n p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  3565 next_s:  r n b q k b . r
. p p p p p . p
p . . . . n p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0 -1  0  0  0  0 -2 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3  0 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b . r
. p p p p p . p
p . . . . n p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b . r
. p p p p p . p
p . . . . n p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388082860>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  0 0 0 3  at:  3
count:  5
inserting:  0 0 0 2  at:  2
count:  6
inserting:  0 0 0 1  at:  1
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 1 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 1 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00308564]
MCTS.py==>search  returning value of canonical board -v:  [0.00308564]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  981
ChessGame==>getNextState  param action number:  981 self.n*self.n:  64
selected action:  1 7 2 5
MOVE:  b8c6
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  b8c6
position:  b8c6
board:  r . b q k b n r
. p p p p p . p
p . n . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r . b q k b n r
. p p p p p . p
p . n . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  981 next_s:  r . b q k b n r
. p p p p p . p
p . n . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0 -1  0 -2  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4  0 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r . b q k b n r
. p p p p p . p
p . n . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r . b q k b n r
. p p p p p . p
p . n . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880c6828>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  0 0 0 3  at:  3
count:  5
inserting:  0 0 0 2  at:  2
count:  6
inserting:  0 0 0 1  at:  1
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 1 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 1 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00859728]
MCTS.py==>search  returning value of canonical board -v:  [0.00859728]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  1949
ChessGame==>getNextState  param action number:  1949 self.n*self.n:  64
selected action:  3 6 3 5
MOVE:  d7d6
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  d7d6
MOOOVOVOEOEaaaa:  43
position:  d7d6
board:  r n b q k b n r
. p p . p p . p
p . . p . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p . p p . p
p . . p . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  1949 next_s:  r n b q k b n r
. p p . p p . p
p . . p . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0 -1  0  0 -1  0  0 -1  0
  0 -1 -1  0 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p . p p . p
p . . p . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p . p p . p
p . . p . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388058b38>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  0 0 0 3  at:  3
count:  5
inserting:  0 0 0 2  at:  2
count:  6
inserting:  0 0 0 1  at:  1
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 1 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 1 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00692062]
MCTS.py==>search  returning value of canonical board -v:  [0.00692062]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  3581
ChessGame==>getNextState  param action number:  3581 self.n*self.n:  64
selected action:  6 7 7 5
MOVE:  g8h6
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  g8h6
position:  g8h6
board:  r n b q k b . r
. p p p p p . p
p . . . . . p n
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b . r
. p p p p p . p
p . . . . . p n
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  3581 next_s:  r n b q k b . r
. p p p p p . p
p . . . . . p n
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1 -2
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3  0 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b . r
. p p p p p . p
p . . . . . p n
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b . r
. p p p p p . p
p . . . . . p n
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880a0d68>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  7 0 7 1  at:  3641
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  0 0 0 3  at:  3
count:  5
inserting:  0 0 0 2  at:  2
count:  6
inserting:  0 0 0 1  at:  1
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 1 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 1 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00671897]
MCTS.py==>search  returning value of canonical board -v:  [0.00671897]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>getActionProb self.game.stringRepresentation(canonicalBoard)  s:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>getActionProb returns: probs  counts:  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] probs:  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Coach.py ==>executeEpisode  action:  3444
ChessGame==>getNextState  param action number:  3444 self.n*self.n:  64
selected action:  6 5 6 4
MOVE:  g6g5
board:  r n b q k b n r
. p p p p p . p
p . . . . . p .
P . . . . . . .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  g6g5
MOOOVOVOEOEaaaa:  38
position:  g6g5
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
FINAL SELECTED MOVE NEW BOARD:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
Coach.py ==>executeEpisode  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R self.curPlayer:  1
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R player:  1
Coach.py ==>executeEpisode  canonicalBoard:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  1
ChessGame==>getNextState  param action number:  1 self.n*self.n:  64
selected action:  0 0 0 1
MOVE:  a1a2
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  a1a2
position:  a1a2
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . . . P
R P P P P P P .
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . . . P
R P P P P P P .
. N B Q K B N R player:  -1
MCTS.py==>search  best_act:  1 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . . . P
R P P P P P P .
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  4  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . . . P
R P P P P P P .
. N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . . . P
R P P P P P P .
. N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1379bf24a8>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 7 0 6  at:  454
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  6 4 6 3  at:  3379
count:  13
inserting:  7 6 7 4  at:  4028
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00914385]
MCTS.py==>search  returning value of canonical board -v:  [0.00914385]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  1106
ChessGame==>getNextState  param action number:  1106 self.n*self.n:  64
selected action:  2 1 2 2
MOVE:  c2c3
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  c2c3
MOOOVOVOEOEaaaa:  18
position:  c2c3
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . P . . . . P
. P . P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . P . . . . P
. P . P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  1106 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . P . . . . P
. P . P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  0  1  1  1  1  0  0  0  1  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . P . . . . P
. P . P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . P . . . . P
. P . P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1379bf2f60>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 7 0 6  at:  454
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  6 4 6 3  at:  3379
count:  13
inserting:  7 6 7 4  at:  4028
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00819575]
MCTS.py==>search  returning value of canonical board -v:  [0.00819575]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  3771
ChessGame==>getNextState  param action number:  3771 self.n*self.n:  64
selected action:  7 2 7 3
MOVE:  h3h4
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  h3h4
MOOOVOVOEOEaaaa:  31
position:  h3h4
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . P
. . . . . . . .
. P P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . P
. . . . . . . .
. P P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  3771 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . P
. . . . . . . .
. P P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  1  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . P
. . . . . . . .
. P P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . P
. . . . . . . .
. P P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1379bf2400>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 7 0 6  at:  454
count:  6
inserting:  6 4 7 3  at:  3387
count:  7
inserting:  7 6 7 5  at:  4029
count:  8
inserting:  5 6 5 5  at:  2989
count:  9
inserting:  4 6 4 5  at:  2469
count:  10
inserting:  3 6 3 5  at:  1949
count:  11
inserting:  2 6 2 5  at:  1429
count:  12
inserting:  1 6 1 5  at:  909
count:  13
inserting:  6 4 6 3  at:  3379
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  5 6 5 4  at:  2988
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00828061]
MCTS.py==>search  returning value of canonical board -v:  [0.00828061]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  3114
ChessGame==>getNextState  param action number:  3114 self.n*self.n:  64
selected action:  6 0 5 2
MOVE:  g1f3
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  g1f3
position:  g1f3
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . N . P
. P P P P P P .
R N B Q K B . R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . N . P
. P P P P P P .
R N B Q K B . R player:  -1
MCTS.py==>search  best_act:  3114 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . N . P
. P P P P P P .
R N B Q K B . R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  0  4  0  1  1  1  1  1  1  0  0  0  0  0  0  2  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . N . P
. P P P P P P .
R N B Q K B . R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . N . P
. P P P P P P .
R N B Q K B . R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13b6798e10>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 7 0 6  at:  454
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  6 4 6 3  at:  3379
count:  13
inserting:  7 6 7 4  at:  4028
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00731482]
MCTS.py==>search  returning value of canonical board -v:  [0.00731482]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2146
ChessGame==>getNextState  param action number:  2146 self.n*self.n:  64
selected action:  4 1 4 2
MOVE:  e2e3
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  e2e3
MOOOVOVOEOEaaaa:  20
position:  e2e3
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . P . . P
. P P P . P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . P . . P
. P P P . P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  2146 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . P . . P
. P P P . P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  0  1  1  0  0  0  0  0  1  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . P . . P
. P P P . P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . P . . P
. P P P . P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880edfd0>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 7 0 6  at:  454
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  6 4 6 3  at:  3379
count:  13
inserting:  7 6 7 4  at:  4028
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00695126]
MCTS.py==>search  returning value of canonical board -v:  [0.00695126]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2
ChessGame==>getNextState  param action number:  2 self.n*self.n:  64
selected action:  0 0 0 2
MOVE:  a1a3
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  a1a3
position:  a1a3
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
R . . . . . . P
. P P P P P P .
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
R . . . . . . P
. P P P P P P .
. N B Q K B N R player:  -1
MCTS.py==>search  best_act:  2 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
R . . . . . . P
. P P P P P P .
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  4  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
R . . . . . . P
. P P P P P P .
. N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
R . . . . . . P
. P P P P P P .
. N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880a0d30>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 7 0 6  at:  454
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  6 4 6 3  at:  3379
count:  13
inserting:  7 6 7 4  at:  4028
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00623802]
MCTS.py==>search  returning value of canonical board -v:  [0.00623802]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  514
ChessGame==>getNextState  param action number:  514 self.n*self.n:  64
selected action:  1 0 0 2
MOVE:  b1a3
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  b1a3
position:  b1a3
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  -1
MCTS.py==>search  best_act:  514 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388094518>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 7 0 6  at:  454
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  6 4 6 3  at:  3379
count:  13
inserting:  7 6 7 4  at:  4028
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01081369]
MCTS.py==>search  returning value of canonical board -v:  [0.01081369]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  1107
ChessGame==>getNextState  param action number:  1107 self.n*self.n:  64
selected action:  2 1 2 3
MOVE:  c2c4
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  c2c4
MOOOVOVOEOEaaaa:  26
position:  c2c4
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . P . . . . .
. . . . . . . P
. P . P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . P . . . . .
. . . . . . . P
. P . P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  1107 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . P . . . . .
. . . . . . . P
. P . P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  0  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  1  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . P . . . . .
. . . . . . . P
. P . P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . P . . . . .
. . . . . . . P
. P . P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388082a20>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 7 0 6  at:  454
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  6 4 6 3  at:  3379
count:  13
inserting:  7 6 7 4  at:  4028
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00805317]
MCTS.py==>search  returning value of canonical board -v:  [0.00805317]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  3186
ChessGame==>getNextState  param action number:  3186 self.n*self.n:  64
selected action:  6 1 6 2
MOVE:  g2g3
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  g2g3
MOOOVOVOEOEaaaa:  22
position:  g2g3
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . . P P
. P P P P P . .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . . P P
. P P P P P . .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  3186 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . . P P
. P P P P P . .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  0  0  0  0  0  0  0  0  1  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . . P P
. P P P P P . .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . . P P
. P P P P P . .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1379bcd400>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 7 0 6  at:  454
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  6 4 6 3  at:  3379
count:  13
inserting:  7 6 7 4  at:  4028
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00591275]
MCTS.py==>search  returning value of canonical board -v:  [0.00591275]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  587
ChessGame==>getNextState  param action number:  587 self.n*self.n:  64
selected action:  1 1 1 3
MOVE:  b2b4
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  b2b4
MOOOVOVOEOEaaaa:  25
position:  b2b4
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. P . . . . . .
. . . . . . . P
. . P P P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. P . . . . . .
. . . . . . . P
. . P P P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  587 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. P . . . . . .
. . . . . . . P
. . P P P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  0  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  1  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. P . . . . . .
. . . . . . . P
. . P P P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. P . . . . . .
. . . . . . . P
. . P P P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388082c50>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 7 0 6  at:  454
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  6 4 6 3  at:  3379
count:  13
inserting:  7 6 7 4  at:  4028
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01046127]
MCTS.py==>search  returning value of canonical board -v:  [0.01046127]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  1626
ChessGame==>getNextState  param action number:  1626 self.n*self.n:  64
selected action:  3 1 3 2
MOVE:  d2d3
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  d2d3
MOOOVOVOEOEaaaa:  19
position:  d2d3
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . P . . . P
. P P . P P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . P . . . P
. P P . P P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  1626 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . P . . . P
. P P . P P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  0  1  1  1  0  0  0  0  1  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . P . . . P
. P P . P P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . P . . . P
. P P . P P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f138809b128>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 7 0 6  at:  454
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  6 4 6 3  at:  3379
count:  13
inserting:  7 6 7 4  at:  4028
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [0.00056405]
MCTS.py==>search  returning value of canonical board -v:  [-0.00056405]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  3187
ChessGame==>getNextState  param action number:  3187 self.n*self.n:  64
selected action:  6 1 6 3
MOVE:  g2g4
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  g2g4
MOOOVOVOEOEaaaa:  30
position:  g2g4
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . P .
. . . . . . . P
. P P P P P . .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . P .
. . . . . . . P
. P P P P P . .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  3187 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . P .
. . . . . . . P
. P P P P P . .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  0  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  1  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . P .
. . . . . . . P
. P P P P P . .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . P .
. . . . . . . P
. P P P P P . .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388094cf8>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  252
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 7 0 6  at:  454
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  7 6 7 4  at:  4028
count:  13
inserting:  5 6 5 4  at:  2988
count:  14
inserting:  4 6 4 4  at:  2468
count:  15
inserting:  3 6 3 4  at:  1948
count:  16
inserting:  2 6 2 4  at:  1428
count:  17
inserting:  1 6 1 4  at:  908
count:  18
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00343791]
MCTS.py==>search  returning value of canonical board -v:  [0.00343791]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2666
ChessGame==>getNextState  param action number:  2666 self.n*self.n:  64
selected action:  5 1 5 2
MOVE:  f2f3
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  f2f3
MOOOVOVOEOEaaaa:  21
position:  f2f3
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . P . P
. P P P P . P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . P . P
. P P P P . P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  2666 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . P . P
. P P P P . P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  0  1  0  0  0  0  0  0  1  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . P . P
. P P P P . P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . P . P
. P P P P . P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388059630>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 7 0 6  at:  454
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  6 4 6 3  at:  3379
count:  13
inserting:  7 6 7 4  at:  4028
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00728071]
MCTS.py==>search  returning value of canonical board -v:  [0.00728071]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2147
ChessGame==>getNextState  param action number:  2147 self.n*self.n:  64
selected action:  4 1 4 3
MOVE:  e2e4
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  e2e4
MOOOVOVOEOEaaaa:  28
position:  e2e4
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . P . . .
. . . . . . . P
. P P P . P P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . P . . .
. . . . . . . P
. P P P . P P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  2147 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . P . . .
. . . . . . . P
. P P P . P P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  0  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  1  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . P . . .
. . . . . . . P
. P P P . P P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . P . . .
. . . . . . . P
. P P P . P P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1379bf20b8>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 7 0 6  at:  454
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  6 4 6 3  at:  3379
count:  13
inserting:  7 6 7 4  at:  4028
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00910645]
MCTS.py==>search  returning value of canonical board -v:  [0.00910645]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2667
ChessGame==>getNextState  param action number:  2667 self.n*self.n:  64
selected action:  5 1 5 3
MOVE:  f2f4
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  f2f4
MOOOVOVOEOEaaaa:  29
position:  f2f4
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . P . .
. . . . . . . P
. P P P P . P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . P . .
. . . . . . . P
. P P P P . P .
R N B Q K B N R player:  -1
MCTS.py==>search  best_act:  2667 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . P . .
. . . . . . . P
. P P P P . P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  0  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  1  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . P . .
. . . . . . . P
. P P P P . P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . P . .
. . . . . . . P
. P P P P . P .
R N B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1379bf2a90>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 7 0 6  at:  454
count:  6
inserting:  6 4 5 3  at:  3371
count:  7
inserting:  7 6 7 5  at:  4029
count:  8
inserting:  5 6 5 5  at:  2989
count:  9
inserting:  4 6 4 5  at:  2469
count:  10
inserting:  3 6 3 5  at:  1949
count:  11
inserting:  2 6 2 5  at:  1429
count:  12
inserting:  1 6 1 5  at:  909
count:  13
inserting:  6 4 6 3  at:  3379
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  5 6 5 4  at:  2988
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.0049693]
MCTS.py==>search  returning value of canonical board -v:  [0.0049693]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>getActionProb self.game.stringRepresentation(canonicalBoard)  s:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>getActionProb returns: probs  counts:  [0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] probs:  [0.0, 0.06666666666666667, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Coach.py ==>executeEpisode  action:  514
ChessGame==>getNextState  param action number:  514 self.n*self.n:  64
selected action:  1 0 0 2
MOVE:  b1a3
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
. . . . . . . P
. P P P P P P .
R N B Q K B N R
MOOOVOVOEOE:  b1a3
position:  b1a3
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
FINAL SELECTED MOVE NEW BOARD:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  -1
Coach.py ==>executeEpisode  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R self.curPlayer:  -1
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  -1
Coach.py ==>executeEpisode  canonicalBoard:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  454
ChessGame==>getNextState  param action number:  454 self.n*self.n:  64
selected action:  0 7 0 6
MOVE:  a8a7
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
MOOOVOVOEOE:  a8a7
position:  a8a7
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  -1
MCTS.py==>search  best_act:  454 next_s:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1379bcd470>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  0 2 1 4  at:  140
count:  1
inserting:  0 2 2 3  at:  147
count:  2
inserting:  0 2 1 0  at:  136
count:  3
inserting:  7 0 7 1  at:  3641
count:  4
inserting:  6 0 5 2  at:  3114
count:  5
inserting:  0 0 0 1  at:  1
count:  6
inserting:  0 0 1 0  at:  8
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01044947]
MCTS.py==>search  returning value of canonical board -v:  [0.01044947]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2468
ChessGame==>getNextState  param action number:  2468 self.n*self.n:  64
selected action:  4 6 4 4
MOVE:  e7e5
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
MOOOVOVOEOE:  e7e5
MOOOVOVOEOEaaaa:  36
position:  e7e5
board:  r n b q k b n r
. p p p . p . p
p . . . . . . .
P . . . p . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p . p . p
p . . . . . . .
P . . . p . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  -1
MCTS.py==>search  best_act:  2468 next_s:  r n b q k b n r
. p p p . p . p
p . . . . . . .
P . . . p . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0 -1  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1  0 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p . p . p
p . . . . . . .
P . . . p . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p . p . p
p . . . . . . .
P . . . p . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1379bf2748>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  0 2 1 4  at:  140
count:  1
inserting:  0 2 2 3  at:  147
count:  2
inserting:  0 2 1 0  at:  136
count:  3
inserting:  7 0 7 1  at:  3641
count:  4
inserting:  6 0 5 2  at:  3114
count:  5
inserting:  0 0 0 1  at:  1
count:  6
inserting:  0 0 1 0  at:  8
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00491205]
MCTS.py==>search  returning value of canonical board -v:  [0.00491205]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2989
ChessGame==>getNextState  param action number:  2989 self.n*self.n:  64
selected action:  5 6 5 5
MOVE:  f7f6
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
MOOOVOVOEOE:  f7f6
MOOOVOVOEOEaaaa:  45
position:  f7f6
board:  r n b q k b n r
. p p p p . . p
p . . . . p . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p . . p
p . . . . p . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  -1
MCTS.py==>search  best_act:  2989 next_s:  r n b q k b n r
. p p p p . . p
p . . . . p . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0 -1  0  0
  0 -1 -1 -1 -1  0  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p . . p
p . . . . p . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p . . p
p . . . . p . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388059c50>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  0 2 1 4  at:  140
count:  1
inserting:  0 2 2 3  at:  147
count:  2
inserting:  0 2 1 0  at:  136
count:  3
inserting:  7 0 7 1  at:  3641
count:  4
inserting:  6 0 5 2  at:  3114
count:  5
inserting:  0 0 0 1  at:  1
count:  6
inserting:  0 0 1 0  at:  8
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.0086617]
MCTS.py==>search  returning value of canonical board -v:  [0.0086617]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2469
ChessGame==>getNextState  param action number:  2469 self.n*self.n:  64
selected action:  4 6 4 5
MOVE:  e7e6
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
MOOOVOVOEOE:  e7e6
MOOOVOVOEOEaaaa:  44
position:  e7e6
board:  r n b q k b n r
. p p p . p . p
p . . . p . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p . p . p
p . . . p . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  -1
MCTS.py==>search  best_act:  2469 next_s:  r n b q k b n r
. p p p . p . p
p . . . p . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0 -1  0  0  0
  0 -1 -1 -1  0 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p . p . p
p . . . p . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p . p . p
p . . . p . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388059390>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  0 2 1 4  at:  140
count:  1
inserting:  0 2 2 3  at:  147
count:  2
inserting:  0 2 1 0  at:  136
count:  3
inserting:  7 0 7 1  at:  3641
count:  4
inserting:  6 0 5 2  at:  3114
count:  5
inserting:  0 0 0 1  at:  1
count:  6
inserting:  0 0 1 0  at:  8
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00832486]
MCTS.py==>search  returning value of canonical board -v:  [0.00832486]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  1428
ChessGame==>getNextState  param action number:  1428 self.n*self.n:  64
selected action:  2 6 2 4
MOVE:  c7c5
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
MOOOVOVOEOE:  c7c5
MOOOVOVOEOEaaaa:  34
position:  c7c5
board:  r n b q k b n r
. p . p p p . p
p . . . . . . .
P . p . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p . p p p . p
p . . . . . . .
P . p . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  -1
MCTS.py==>search  best_act:  1428 next_s:  r n b q k b n r
. p . p p p . p
p . . . . . . .
P . p . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0 -1  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1  0 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p . p p p . p
p . . . . . . .
P . p . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p . p p p . p
p . . . . . . .
P . p . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388059320>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  0 2 1 4  at:  140
count:  1
inserting:  0 2 2 3  at:  147
count:  2
inserting:  0 2 1 0  at:  136
count:  3
inserting:  7 0 7 1  at:  3641
count:  4
inserting:  6 0 5 2  at:  3114
count:  5
inserting:  0 0 0 1  at:  1
count:  6
inserting:  0 0 1 0  at:  8
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00594374]
MCTS.py==>search  returning value of canonical board -v:  [0.00594374]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  4028
ChessGame==>getNextState  param action number:  4028 self.n*self.n:  64
selected action:  7 6 7 4
MOVE:  h7h5
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
MOOOVOVOEOE:  h7h5
MOOOVOVOEOEaaaa:  39
position:  h7h5
board:  r n b q k b n r
. p p p p p . .
p . . . . . . .
P . . . . . p p
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . .
p . . . . . . .
P . . . . . p p
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  -1
MCTS.py==>search  best_act:  4028 next_s:  r n b q k b n r
. p p p p p . .
p . . . . . . .
P . . . . . p p
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1 -1 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0  0 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . .
p . . . . . . .
P . . . . . p p
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p p . .
p . . . . . . .
P . . . . . p p
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f138809b128>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  0 2 1 4  at:  140
count:  1
inserting:  0 2 2 3  at:  147
count:  2
inserting:  0 2 1 0  at:  136
count:  3
inserting:  7 0 7 1  at:  3641
count:  4
inserting:  6 0 5 2  at:  3114
count:  5
inserting:  0 0 0 1  at:  1
count:  6
inserting:  0 0 1 0  at:  8
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00994994]
MCTS.py==>search  returning value of canonical board -v:  [0.00994994]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  1429
ChessGame==>getNextState  param action number:  1429 self.n*self.n:  64
selected action:  2 6 2 5
MOVE:  c7c6
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
MOOOVOVOEOE:  c7c6
MOOOVOVOEOEaaaa:  42
position:  c7c6
board:  r n b q k b n r
. p . p p p . p
p . p . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p . p p p . p
p . p . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  -1
MCTS.py==>search  best_act:  1429 next_s:  r n b q k b n r
. p . p p p . p
p . p . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0 -1  0  0  0  0  0
  0 -1  0 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p . p p p . p
p . p . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p . p p p . p
p . p . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1379bcdf60>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  0 2 1 4  at:  140
count:  1
inserting:  0 2 2 3  at:  147
count:  2
inserting:  0 2 1 0  at:  136
count:  3
inserting:  7 0 7 1  at:  3641
count:  4
inserting:  6 0 5 2  at:  3114
count:  5
inserting:  0 0 0 1  at:  1
count:  6
inserting:  0 0 1 0  at:  8
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01107222]
MCTS.py==>search  returning value of canonical board -v:  [0.01107222]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  3069
ChessGame==>getNextState  param action number:  3069 self.n*self.n:  64
selected action:  5 7 7 5
MOVE:  f8h6
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
MOOOVOVOEOE:  f8h6
position:  f8h6
board:  r n b q k . n r
. p p p p p . p
p . . . . . . b
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k . n r
. p p p p p . p
p . . . . . . b
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  -1
MCTS.py==>search  best_act:  3069 next_s:  r n b q k . n r
. p p p p p . p
p . . . . . . b
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0 -3
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6  0 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k . n r
. p p p p p . p
p . . . . . . b
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k . n r
. p p p p p . p
p . . . . . . b
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880394a8>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  0 2 1 4  at:  140
count:  1
inserting:  0 2 2 3  at:  147
count:  2
inserting:  0 2 1 0  at:  136
count:  3
inserting:  7 0 7 1  at:  3641
count:  4
inserting:  6 0 5 2  at:  3114
count:  5
inserting:  0 0 0 1  at:  1
count:  6
inserting:  0 0 1 0  at:  8
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00994557]
MCTS.py==>search  returning value of canonical board -v:  [0.00994557]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  3379
ChessGame==>getNextState  param action number:  3379 self.n*self.n:  64
selected action:  6 4 6 3
MOVE:  g5g4
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
MOOOVOVOEOE:  g5g4
MOOOVOVOEOEaaaa:  30
position:  g5g4
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . . .
. . . . . . p .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . . .
. . . . . . p .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  -1
MCTS.py==>search  best_act:  3379 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . . .
. . . . . . p .
N . . . . . . P
. P P P P P P .
R . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0 -1  0  1  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . . .
. . . . . . p .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . . .
. . . . . . p .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388082780>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  0 2 1 4  at:  140
count:  1
inserting:  0 2 2 3  at:  147
count:  2
inserting:  0 2 1 0  at:  136
count:  3
inserting:  7 0 7 1  at:  3641
count:  4
inserting:  6 0 5 2  at:  3114
count:  5
inserting:  0 0 0 1  at:  1
count:  6
inserting:  0 0 1 0  at:  8
count:  7
inserting:  7 2 6 3  at:  3763
count:  8
inserting:  7 2 7 3  at:  3771
count:  9
inserting:  6 1 6 2  at:  3186
count:  10
inserting:  5 1 5 2  at:  2666
count:  11
inserting:  4 1 4 2  at:  2146
count:  12
inserting:  3 1 3 2  at:  1626
count:  13
inserting:  2 1 2 2  at:  1106
count:  14
inserting:  1 1 1 2  at:  586
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01134009]
MCTS.py==>search  returning value of canonical board -v:  [0.01134009]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  3581
ChessGame==>getNextState  param action number:  3581 self.n*self.n:  64
selected action:  6 7 7 5
MOVE:  g8h6
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
MOOOVOVOEOE:  g8h6
position:  g8h6
board:  r n b q k b . r
. p p p p p . p
p . . . . . . n
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b . r
. p p p p p . p
p . . . . . . n
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  -1
MCTS.py==>search  best_act:  3581 next_s:  r n b q k b . r
. p p p p p . p
p . . . . . . n
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0 -2
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3  0 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b . r
. p p p p p . p
p . . . . . . n
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b . r
. p p p p p . p
p . . . . . . n
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f138809b748>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  0 2 1 4  at:  140
count:  1
inserting:  0 2 2 3  at:  147
count:  2
inserting:  0 2 1 0  at:  136
count:  3
inserting:  7 0 7 1  at:  3641
count:  4
inserting:  6 0 5 2  at:  3114
count:  5
inserting:  0 0 0 1  at:  1
count:  6
inserting:  0 0 1 0  at:  8
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00964222]
MCTS.py==>search  returning value of canonical board -v:  [0.00964222]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2988
ChessGame==>getNextState  param action number:  2988 self.n*self.n:  64
selected action:  5 6 5 4
MOVE:  f7f5
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
MOOOVOVOEOE:  f7f5
MOOOVOVOEOEaaaa:  37
position:  f7f5
board:  r n b q k b n r
. p p p p . . p
p . . . . . . .
P . . . . p p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p . . p
p . . . . . . .
P . . . . p p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  -1
MCTS.py==>search  best_act:  2988 next_s:  r n b q k b n r
. p p p p . . p
p . . . . . . .
P . . . . p p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0 -1 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p . . p
p . . . . . . .
P . . . . p p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p . . p
p . . . . . . .
P . . . . p p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388058f28>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  0 2 1 4  at:  140
count:  1
inserting:  0 2 2 3  at:  147
count:  2
inserting:  0 2 1 0  at:  136
count:  3
inserting:  7 0 7 1  at:  3641
count:  4
inserting:  6 0 5 2  at:  3114
count:  5
inserting:  0 0 0 1  at:  1
count:  6
inserting:  0 0 1 0  at:  8
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00697699]
MCTS.py==>search  returning value of canonical board -v:  [0.00697699]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  908
ChessGame==>getNextState  param action number:  908 self.n*self.n:  64
selected action:  1 6 1 4
MOVE:  b7b5
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
MOOOVOVOEOE:  b7b5
MOOOVOVOEOEaaaa:  33
position:  b7b5
board:  r n b q k b n r
. . p p p p . p
p . . . . . . .
P p . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. . p p p p . p
p . . . . . . .
P p . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  -1
MCTS.py==>search  best_act:  908 next_s:  r n b q k b n r
. . p p p p . p
p . . . . . . .
P p . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1 -1  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0  0 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. . p p p p . p
p . . . . . . .
P p . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. . p p p p . p
p . . . . . . .
P p . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880a0a90>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  294
inserting:  0 2 1 4  at:  140
count:  1
inserting:  0 2 2 3  at:  147
count:  2
inserting:  0 2 1 0  at:  136
count:  3
inserting:  7 0 7 1  at:  3641
count:  4
inserting:  6 0 5 2  at:  3114
count:  5
inserting:  0 0 0 1  at:  1
count:  6
inserting:  0 0 1 0  at:  8
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
inserting:  0 4 1 5  at:  269
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01067009]
MCTS.py==>search  returning value of canonical board -v:  [0.01067009]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  3565
ChessGame==>getNextState  param action number:  3565 self.n*self.n:  64
selected action:  6 7 5 5
MOVE:  g8f6
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
MOOOVOVOEOE:  g8f6
position:  g8f6
board:  r n b q k b . r
. p p p p p . p
p . . . . n . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b . r
. p p p p p . p
p . . . . n . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  -1
MCTS.py==>search  best_act:  3565 next_s:  r n b q k b . r
. p p p p p . p
p . . . . n . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0 -2  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3  0 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b . r
. p p p p p . p
p . . . . n . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b . r
. p p p p p . p
p . . . . n . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1379bf2f60>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  0 2 1 4  at:  140
count:  1
inserting:  0 2 2 3  at:  147
count:  2
inserting:  0 2 1 0  at:  136
count:  3
inserting:  7 0 7 1  at:  3641
count:  4
inserting:  6 0 5 2  at:  3114
count:  5
inserting:  0 0 0 1  at:  1
count:  6
inserting:  0 0 1 0  at:  8
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00507829]
MCTS.py==>search  returning value of canonical board -v:  [0.00507829]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  1948
ChessGame==>getNextState  param action number:  1948 self.n*self.n:  64
selected action:  3 6 3 4
MOVE:  d7d5
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
MOOOVOVOEOE:  d7d5
MOOOVOVOEOEaaaa:  35
position:  d7d5
board:  r n b q k b n r
. p p . p p . p
p . . . . . . .
P . . p . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p . p p . p
p . . . . . . .
P . . p . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  -1
MCTS.py==>search  best_act:  1948 next_s:  r n b q k b n r
. p p . p p . p
p . . . . . . .
P . . p . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0 -1  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1  0 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p . p p . p
p . . . . . . .
P . . p . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p . p p . p
p . . . . . . .
P . . p . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388039160>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  0 2 1 4  at:  140
count:  1
inserting:  0 2 2 3  at:  147
count:  2
inserting:  0 2 1 0  at:  136
count:  3
inserting:  7 0 7 1  at:  3641
count:  4
inserting:  6 0 5 2  at:  3114
count:  5
inserting:  0 0 0 1  at:  1
count:  6
inserting:  0 0 1 0  at:  8
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00600545]
MCTS.py==>search  returning value of canonical board -v:  [0.00600545]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  981
ChessGame==>getNextState  param action number:  981 self.n*self.n:  64
selected action:  1 7 2 5
MOVE:  b8c6
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
MOOOVOVOEOE:  b8c6
position:  b8c6
board:  r . b q k b n r
. p p p p p . p
p . n . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r . b q k b n r
. p p p p p . p
p . n . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  -1
MCTS.py==>search  best_act:  981 next_s:  r . b q k b n r
. p p p p p . p
p . n . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0 -2  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4  0 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r . b q k b n r
. p p p p p . p
p . n . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r . b q k b n r
. p p p p p . p
p . n . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388039eb8>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  0 2 1 4  at:  140
count:  1
inserting:  0 2 2 3  at:  147
count:  2
inserting:  0 2 1 0  at:  136
count:  3
inserting:  7 0 7 1  at:  3641
count:  4
inserting:  6 0 5 2  at:  3114
count:  5
inserting:  0 0 0 1  at:  1
count:  6
inserting:  0 0 1 0  at:  8
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  6 1 6 3  at:  3187
count:  15
inserting:  5 1 5 3  at:  2667
count:  16
inserting:  4 1 4 3  at:  2147
count:  17
inserting:  3 1 3 3  at:  1627
count:  18
inserting:  2 1 2 3  at:  1107
count:  19
inserting:  1 1 1 3  at:  587
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 1 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 1 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01366526]
MCTS.py==>search  returning value of canonical board -v:  [0.01366526]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>getActionProb self.game.stringRepresentation(canonicalBoard)  s:  [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
Coach.py ==>executeEpisode  action:  454
ChessGame==>getNextState  param action number:  454 self.n*self.n:  64
selected action:  0 7 0 6
MOVE:  a8a7
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
MOOOVOVOEOE:  a8a7
position:  a8a7
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
FINAL SELECTED MOVE NEW BOARD:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  1
Coach.py ==>executeEpisode  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R self.curPlayer:  1
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R player:  1
Coach.py ==>executeEpisode  canonicalBoard:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  1
ChessGame==>getNextState  param action number:  1 self.n*self.n:  64
selected action:  0 0 0 1
MOVE:  a1a2
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
MOOOVOVOEOE:  a1a2
position:  a1a2
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  1 next_s:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1379bf2e48>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 6 0 7  at:  391
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  6 4 6 3  at:  3379
count:  13
inserting:  7 6 7 4  at:  4028
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01271205]
MCTS.py==>search  returning value of canonical board -v:  [0.01271205]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  1106
ChessGame==>getNextState  param action number:  1106 self.n*self.n:  64
selected action:  2 1 2 2
MOVE:  c2c3
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
MOOOVOVOEOE:  c2c3
MOOOVOVOEOEaaaa:  18
position:  c2c3
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . P . . . . P
. P . P P P P .
R . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . P . . . . P
. P . P P P P .
R . B Q K B N R player:  -1
MCTS.py==>search  best_act:  1106 next_s:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . P . . . . P
. P . P P P P .
R . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  0  1  1  1  1  0  2  0  1  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . P . . . . P
. P . P P P P .
R . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . P . . . . P
. P . P P P P .
R . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880a0e10>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 6 0 7  at:  391
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  6 4 6 3  at:  3379
count:  13
inserting:  7 6 7 4  at:  4028
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01142098]
MCTS.py==>search  returning value of canonical board -v:  [0.01142098]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  3771
ChessGame==>getNextState  param action number:  3771 self.n*self.n:  64
selected action:  7 2 7 3
MOVE:  h3h4
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
MOOOVOVOEOE:  h3h4
MOOOVOVOEOEaaaa:  31
position:  h3h4
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . P
N . . . . . . .
. P P P P P P .
R . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . P
N . . . . . . .
. P P P P P P .
R . B Q K B N R player:  -1
MCTS.py==>search  best_act:  3771 next_s:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . P
N . . . . . . .
. P P P P P P .
R . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  1  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . P
N . . . . . . .
. P P P P P P .
R . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . P
N . . . . . . .
. P P P P P P .
R . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880944e0>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 6 0 7  at:  391
count:  6
inserting:  6 4 7 3  at:  3387
count:  7
inserting:  7 6 7 5  at:  4029
count:  8
inserting:  5 6 5 5  at:  2989
count:  9
inserting:  4 6 4 5  at:  2469
count:  10
inserting:  3 6 3 5  at:  1949
count:  11
inserting:  2 6 2 5  at:  1429
count:  12
inserting:  1 6 1 5  at:  909
count:  13
inserting:  6 4 6 3  at:  3379
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  5 6 5 4  at:  2988
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01223013]
MCTS.py==>search  returning value of canonical board -v:  [0.01223013]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  147
ChessGame==>getNextState  param action number:  147 self.n*self.n:  64
selected action:  0 2 2 3
MOVE:  a3c4
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
MOOOVOVOEOE:  a3c4
position:  a3c4
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . N . . . . .
. . . . . . . P
. P P P P P P .
R . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . N . . . . .
. . . . . . . P
. P P P P P P .
R . B Q K B N R player:  -1
MCTS.py==>search  best_act:  147 next_s:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . N . . . . .
. . . . . . . P
. P P P P P P .
R . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0  1
  0  0  2  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . N . . . . .
. . . . . . . P
. P P P P P P .
R . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . N . . . . .
. . . . . . . P
. P P P P P P .
R . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1379bcd390>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 6 0 7  at:  391
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  6 4 6 3  at:  3379
count:  13
inserting:  7 6 7 4  at:  4028
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01542808]
MCTS.py==>search  returning value of canonical board -v:  [0.01542808]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2146
ChessGame==>getNextState  param action number:  2146 self.n*self.n:  64
selected action:  4 1 4 2
MOVE:  e2e3
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
MOOOVOVOEOE:  e2e3
MOOOVOVOEOEaaaa:  20
position:  e2e3
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . P . . P
. P P P . P P .
R . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . P . . P
. P P P . P P .
R . B Q K B N R player:  -1
MCTS.py==>search  best_act:  2146 next_s:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . P . . P
. P P P . P P .
R . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  0  1  1  0  2  0  0  0  1  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . P . . P
. P P P . P P .
R . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . P . . P
. P P P . P P .
R . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388039cc0>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 6 0 7  at:  391
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  6 4 6 3  at:  3379
count:  13
inserting:  7 6 7 4  at:  4028
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.0111566]
MCTS.py==>search  returning value of canonical board -v:  [0.0111566]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  3114
ChessGame==>getNextState  param action number:  3114 self.n*self.n:  64
selected action:  6 0 5 2
MOVE:  g1f3
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
MOOOVOVOEOE:  g1f3
position:  g1f3
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . N . P
. P P P P P P .
R . B Q K B . R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . N . P
. P P P P P P .
R . B Q K B . R player:  -1
MCTS.py==>search  best_act:  3114 next_s:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . N . P
. P P P P P P .
R . B Q K B . R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  0  4  0  1  1  1  1  1  1  0  2  0  0  0  0  2  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . N . P
. P P P P P P .
R . B Q K B . R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . N . P
. P P P P P P .
R . B Q K B . R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388039940>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 6 0 7  at:  391
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  6 4 6 3  at:  3379
count:  13
inserting:  7 6 7 4  at:  4028
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.0117625]
MCTS.py==>search  returning value of canonical board -v:  [0.0117625]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  8
ChessGame==>getNextState  param action number:  8 self.n*self.n:  64
selected action:  0 0 1 0
MOVE:  a1b1
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
MOOOVOVOEOE:  a1b1
position:  a1b1
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
. R B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
. R B Q K B N R player:  -1
MCTS.py==>search  best_act:  8 next_s:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
. R B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  4  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
. R B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
. R B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388039278>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 6 0 7  at:  391
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  6 4 6 3  at:  3379
count:  13
inserting:  7 6 7 4  at:  4028
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00236229]
MCTS.py==>search  returning value of canonical board -v:  [0.00236229]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  1107
ChessGame==>getNextState  param action number:  1107 self.n*self.n:  64
selected action:  2 1 2 3
MOVE:  c2c4
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
MOOOVOVOEOE:  c2c4
MOOOVOVOEOEaaaa:  26
position:  c2c4
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . P . . . . .
N . . . . . . P
. P . P P P P .
R . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . P . . . . .
N . . . . . . P
. P . P P P P .
R . B Q K B N R player:  -1
MCTS.py==>search  best_act:  1107 next_s:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . P . . . . .
N . . . . . . P
. P . P P P P .
R . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  0  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  1  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . P . . . . .
N . . . . . . P
. P . P P P P .
R . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . P . . . . .
N . . . . . . P
. P . P P P P .
R . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388039e48>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 6 0 7  at:  391
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  6 4 6 3  at:  3379
count:  13
inserting:  7 6 7 4  at:  4028
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.0105225]
MCTS.py==>search  returning value of canonical board -v:  [0.0105225]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2147
ChessGame==>getNextState  param action number:  2147 self.n*self.n:  64
selected action:  4 1 4 3
MOVE:  e2e4
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
MOOOVOVOEOE:  e2e4
MOOOVOVOEOEaaaa:  28
position:  e2e4
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . P . . .
N . . . . . . P
. P P P . P P .
R . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . P . . .
N . . . . . . P
. P P P . P P .
R . B Q K B N R player:  -1
MCTS.py==>search  best_act:  2147 next_s:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . P . . .
N . . . . . . P
. P P P . P P .
R . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  0  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  1  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . P . . .
N . . . . . . P
. P P P . P P .
R . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . P . . .
N . . . . . . P
. P P P . P P .
R . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388058400>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 6 0 7  at:  391
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  6 4 6 3  at:  3379
count:  13
inserting:  7 6 7 4  at:  4028
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01349352]
MCTS.py==>search  returning value of canonical board -v:  [0.01349352]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  587
ChessGame==>getNextState  param action number:  587 self.n*self.n:  64
selected action:  1 1 1 3
MOVE:  b2b4
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
MOOOVOVOEOE:  b2b4
MOOOVOVOEOEaaaa:  25
position:  b2b4
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. P . . . . . .
N . . . . . . P
. . P P P P P .
R . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. P . . . . . .
N . . . . . . P
. . P P P P P .
R . B Q K B N R player:  -1
MCTS.py==>search  best_act:  587 next_s:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. P . . . . . .
N . . . . . . P
. . P P P P P .
R . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  0  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  1  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. P . . . . . .
N . . . . . . P
. . P P P P P .
R . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. P . . . . . .
N . . . . . . P
. . P P P P P .
R . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1379bf2748>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 6 0 7  at:  391
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  6 4 6 3  at:  3379
count:  13
inserting:  7 6 7 4  at:  4028
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01852684]
MCTS.py==>search  returning value of canonical board -v:  [0.01852684]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  3186
ChessGame==>getNextState  param action number:  3186 self.n*self.n:  64
selected action:  6 1 6 2
MOVE:  g2g3
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
MOOOVOVOEOE:  g2g3
MOOOVOVOEOEaaaa:  22
position:  g2g3
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . P P
. P P P P P . .
R . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . P P
. P P P P P . .
R . B Q K B N R player:  -1
MCTS.py==>search  best_act:  3186 next_s:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . P P
. P P P P P . .
R . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  0  0  2  0  0  0  0  0  1  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . P P
. P P P P P . .
R . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . P P
. P P P P P . .
R . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388064dd8>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 6 0 7  at:  391
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  6 4 6 3  at:  3379
count:  13
inserting:  7 6 7 4  at:  4028
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01061158]
MCTS.py==>search  returning value of canonical board -v:  [0.01061158]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  1626
ChessGame==>getNextState  param action number:  1626 self.n*self.n:  64
selected action:  3 1 3 2
MOVE:  d2d3
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
MOOOVOVOEOE:  d2d3
MOOOVOVOEOEaaaa:  19
position:  d2d3
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . P . . . P
. P P . P P P .
R . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . P . . . P
. P P . P P P .
R . B Q K B N R player:  -1
MCTS.py==>search  best_act:  1626 next_s:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . P . . . P
. P P . P P P .
R . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  0  1  1  1  0  2  0  0  1  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . P . . . P
. P P . P P P .
R . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . P . . . P
. P P . P P P .
R . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f138803dda0>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 6 0 7  at:  391
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  6 4 6 3  at:  3379
count:  13
inserting:  7 6 7 4  at:  4028
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00269125]
MCTS.py==>search  returning value of canonical board -v:  [0.00269125]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2667
ChessGame==>getNextState  param action number:  2667 self.n*self.n:  64
selected action:  5 1 5 3
MOVE:  f2f4
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
MOOOVOVOEOE:  f2f4
MOOOVOVOEOEaaaa:  29
position:  f2f4
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . P . .
N . . . . . . P
. P P P P . P .
R . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . P . .
N . . . . . . P
. P P P P . P .
R . B Q K B N R player:  -1
MCTS.py==>search  best_act:  2667 next_s:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . P . .
N . . . . . . P
. P P P P . P .
R . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  0  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  1  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . P . .
N . . . . . . P
. P P P P . P .
R . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . P . .
N . . . . . . P
. P P P P . P .
R . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880643c8>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 6 0 7  at:  391
count:  6
inserting:  6 4 5 3  at:  3371
count:  7
inserting:  7 6 7 5  at:  4029
count:  8
inserting:  5 6 5 5  at:  2989
count:  9
inserting:  4 6 4 5  at:  2469
count:  10
inserting:  3 6 3 5  at:  1949
count:  11
inserting:  2 6 2 5  at:  1429
count:  12
inserting:  1 6 1 5  at:  909
count:  13
inserting:  6 4 6 3  at:  3379
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  5 6 5 4  at:  2988
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00613531]
MCTS.py==>search  returning value of canonical board -v:  [0.00613531]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2666
ChessGame==>getNextState  param action number:  2666 self.n*self.n:  64
selected action:  5 1 5 2
MOVE:  f2f3
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
MOOOVOVOEOE:  f2f3
MOOOVOVOEOEaaaa:  21
position:  f2f3
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . P . P
. P P P P . P .
R . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . P . P
. P P P P . P .
R . B Q K B N R player:  -1
MCTS.py==>search  best_act:  2666 next_s:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . P . P
. P P P P . P .
R . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  0  1  0  2  0  0  0  0  1  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . P . P
. P P P P . P .
R . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . P . P
. P P P P . P .
R . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388059fd0>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 6 0 7  at:  391
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  6 4 6 3  at:  3379
count:  13
inserting:  7 6 7 4  at:  4028
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00856685]
MCTS.py==>search  returning value of canonical board -v:  [0.00856685]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  3187
ChessGame==>getNextState  param action number:  3187 self.n*self.n:  64
selected action:  6 1 6 3
MOVE:  g2g4
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
MOOOVOVOEOE:  g2g4
MOOOVOVOEOEaaaa:  30
position:  g2g4
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . P .
N . . . . . . P
. P P P P P . .
R . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . P .
N . . . . . . P
. P P P P P . .
R . B Q K B N R player:  -1
MCTS.py==>search  best_act:  3187 next_s:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . P .
N . . . . . . P
. P P P P P . .
R . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  0  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  1  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . P .
N . . . . . . P
. P P P P P . .
R . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . P .
N . . . . . . P
. P P P P P . .
R . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f138809b470>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  252
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  0 6 0 7  at:  391
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  7 6 7 4  at:  4028
count:  13
inserting:  5 6 5 4  at:  2988
count:  14
inserting:  4 6 4 4  at:  2468
count:  15
inserting:  3 6 3 4  at:  1948
count:  16
inserting:  2 6 2 4  at:  1428
count:  17
inserting:  1 6 1 4  at:  908
count:  18
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00865224]
MCTS.py==>search  returning value of canonical board -v:  [0.00865224]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>getActionProb self.game.stringRepresentation(canonicalBoard)  s:  [ 4  0  3  5  6  3  2  4  0  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
Coach.py ==>executeEpisode  action:  1
ChessGame==>getNextState  param action number:  1 self.n*self.n:  64
selected action:  0 0 0 1
MOVE:  a1a2
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
. P P P P P P .
R . B Q K B N R
MOOOVOVOEOE:  a1a2
position:  a1a2
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R
FINAL SELECTED MOVE NEW BOARD:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
Coach.py ==>executeEpisode  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R self.curPlayer:  -1
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
Coach.py ==>executeEpisode  canonicalBoard:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  391
ChessGame==>getNextState  param action number:  391 self.n*self.n:  64
selected action:  0 6 0 7
MOVE:  a7a8
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R
MOOOVOVOEOE:  a7a8
position:  a7a8
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  391 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388039f60>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  0 2 1 4  at:  140
count:  1
inserting:  0 2 2 3  at:  147
count:  2
inserting:  0 2 1 0  at:  136
count:  3
inserting:  0 1 0 0  at:  64
count:  4
inserting:  7 0 7 1  at:  3641
count:  5
inserting:  6 0 5 2  at:  3114
count:  6
inserting:  7 2 7 3  at:  3771
count:  7
inserting:  6 1 6 2  at:  3186
count:  8
inserting:  5 1 5 2  at:  2666
count:  9
inserting:  4 1 4 2  at:  2146
count:  10
inserting:  3 1 3 2  at:  1626
count:  11
inserting:  2 1 2 2  at:  1106
count:  12
inserting:  1 1 1 2  at:  586
count:  13
inserting:  6 1 6 3  at:  3187
count:  14
inserting:  5 1 5 3  at:  2667
count:  15
inserting:  4 1 4 3  at:  2147
count:  16
inserting:  3 1 3 3  at:  1627
count:  17
inserting:  2 1 2 3  at:  1107
count:  18
inserting:  1 1 1 3  at:  587
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01216905]
MCTS.py==>search  returning value of canonical board -v:  [0.01216905]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2468
ChessGame==>getNextState  param action number:  2468 self.n*self.n:  64
selected action:  4 6 4 4
MOVE:  e7e5
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R
MOOOVOVOEOE:  e7e5
MOOOVOVOEOEaaaa:  36
position:  e7e5
board:  . n b q k b n r
r p p p . p . p
p . . . . . . .
P . . . p . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
r p p p . p . p
p . . . . . . .
P . . . p . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  2468 next_s:  . n b q k b n r
r p p p . p . p
p . . . . . . .
P . . . p . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0 -1  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1  0 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
r p p p . p . p
p . . . . . . .
P . . . p . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  . n b q k b n r
r p p p . p . p
p . . . . . . .
P . . . p . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f13880643c8>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  0 2 1 4  at:  140
count:  1
inserting:  0 2 2 3  at:  147
count:  2
inserting:  0 2 1 0  at:  136
count:  3
inserting:  0 1 0 0  at:  64
count:  4
inserting:  7 0 7 1  at:  3641
count:  5
inserting:  6 0 5 2  at:  3114
count:  6
inserting:  7 2 7 3  at:  3771
count:  7
inserting:  6 1 6 2  at:  3186
count:  8
inserting:  5 1 5 2  at:  2666
count:  9
inserting:  4 1 4 2  at:  2146
count:  10
inserting:  3 1 3 2  at:  1626
count:  11
inserting:  2 1 2 2  at:  1106
count:  12
inserting:  1 1 1 2  at:  586
count:  13
inserting:  6 1 6 3  at:  3187
count:  14
inserting:  5 1 5 3  at:  2667
count:  15
inserting:  4 1 4 3  at:  2147
count:  16
inserting:  3 1 3 3  at:  1627
count:  17
inserting:  2 1 2 3  at:  1107
count:  18
inserting:  1 1 1 3  at:  587
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00867144]
MCTS.py==>search  returning value of canonical board -v:  [0.00867144]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2989
ChessGame==>getNextState  param action number:  2989 self.n*self.n:  64
selected action:  5 6 5 5
MOVE:  f7f6
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R
MOOOVOVOEOE:  f7f6
MOOOVOVOEOEaaaa:  45
position:  f7f6
board:  . n b q k b n r
r p p p p . . p
p . . . . p . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
r p p p p . . p
p . . . . p . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  2989 next_s:  . n b q k b n r
r p p p p . . p
p . . . . p . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0 -1  0  0
 -4 -1 -1 -1 -1  0  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
r p p p p . . p
p . . . . p . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  . n b q k b n r
r p p p p . . p
p . . . . p . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f138803d860>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  0 2 1 4  at:  140
count:  1
inserting:  0 2 2 3  at:  147
count:  2
inserting:  0 2 1 0  at:  136
count:  3
inserting:  0 1 0 0  at:  64
count:  4
inserting:  7 0 7 1  at:  3641
count:  5
inserting:  6 0 5 2  at:  3114
count:  6
inserting:  7 2 7 3  at:  3771
count:  7
inserting:  6 1 6 2  at:  3186
count:  8
inserting:  5 1 5 2  at:  2666
count:  9
inserting:  4 1 4 2  at:  2146
count:  10
inserting:  3 1 3 2  at:  1626
count:  11
inserting:  2 1 2 2  at:  1106
count:  12
inserting:  1 1 1 2  at:  586
count:  13
inserting:  6 1 6 3  at:  3187
count:  14
inserting:  5 1 5 3  at:  2667
count:  15
inserting:  4 1 4 3  at:  2147
count:  16
inserting:  3 1 3 3  at:  1627
count:  17
inserting:  2 1 2 3  at:  1107
count:  18
inserting:  1 1 1 3  at:  587
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01084024]
MCTS.py==>search  returning value of canonical board -v:  [0.01084024]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2469
ChessGame==>getNextState  param action number:  2469 self.n*self.n:  64
selected action:  4 6 4 5
MOVE:  e7e6
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R
MOOOVOVOEOE:  e7e6
MOOOVOVOEOEaaaa:  44
position:  e7e6
board:  . n b q k b n r
r p p p . p . p
p . . . p . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
r p p p . p . p
p . . . p . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  2469 next_s:  . n b q k b n r
r p p p . p . p
p . . . p . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0 -1  0  0  0
 -4 -1 -1 -1  0 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
r p p p . p . p
p . . . p . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  . n b q k b n r
r p p p . p . p
p . . . p . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f138803de48>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  0 2 1 4  at:  140
count:  1
inserting:  0 2 2 3  at:  147
count:  2
inserting:  0 2 1 0  at:  136
count:  3
inserting:  0 1 0 0  at:  64
count:  4
inserting:  7 0 7 1  at:  3641
count:  5
inserting:  6 0 5 2  at:  3114
count:  6
inserting:  7 2 7 3  at:  3771
count:  7
inserting:  6 1 6 2  at:  3186
count:  8
inserting:  5 1 5 2  at:  2666
count:  9
inserting:  4 1 4 2  at:  2146
count:  10
inserting:  3 1 3 2  at:  1626
count:  11
inserting:  2 1 2 2  at:  1106
count:  12
inserting:  1 1 1 2  at:  586
count:  13
inserting:  6 1 6 3  at:  3187
count:  14
inserting:  5 1 5 3  at:  2667
count:  15
inserting:  4 1 4 3  at:  2147
count:  16
inserting:  3 1 3 3  at:  1627
count:  17
inserting:  2 1 2 3  at:  1107
count:  18
inserting:  1 1 1 3  at:  587
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01118334]
MCTS.py==>search  returning value of canonical board -v:  [0.01118334]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  4028
ChessGame==>getNextState  param action number:  4028 self.n*self.n:  64
selected action:  7 6 7 4
MOVE:  h7h5
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R
MOOOVOVOEOE:  h7h5
MOOOVOVOEOEaaaa:  39
position:  h7h5
board:  . n b q k b n r
r p p p p p . .
p . . . . . . .
P . . . . . p p
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
r p p p p p . .
p . . . . . . .
P . . . . . p p
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  4028 next_s:  . n b q k b n r
r p p p p p . .
p . . . . . . .
P . . . . . p p
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1 -1 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0  0  0 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
r p p p p p . .
p . . . . . . .
P . . . . . p p
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  . n b q k b n r
r p p p p p . .
p . . . . . . .
P . . . . . p p
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1379bcd898>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  0 2 1 4  at:  140
count:  1
inserting:  0 2 2 3  at:  147
count:  2
inserting:  0 2 1 0  at:  136
count:  3
inserting:  0 1 0 0  at:  64
count:  4
inserting:  7 0 7 1  at:  3641
count:  5
inserting:  6 0 5 2  at:  3114
count:  6
inserting:  7 2 7 3  at:  3771
count:  7
inserting:  6 1 6 2  at:  3186
count:  8
inserting:  5 1 5 2  at:  2666
count:  9
inserting:  4 1 4 2  at:  2146
count:  10
inserting:  3 1 3 2  at:  1626
count:  11
inserting:  2 1 2 2  at:  1106
count:  12
inserting:  1 1 1 2  at:  586
count:  13
inserting:  6 1 6 3  at:  3187
count:  14
inserting:  5 1 5 3  at:  2667
count:  15
inserting:  4 1 4 3  at:  2147
count:  16
inserting:  3 1 3 3  at:  1627
count:  17
inserting:  2 1 2 3  at:  1107
count:  18
inserting:  1 1 1 3  at:  587
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01107889]
MCTS.py==>search  returning value of canonical board -v:  [0.01107889]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  1428
ChessGame==>getNextState  param action number:  1428 self.n*self.n:  64
selected action:  2 6 2 4
MOVE:  c7c5
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R
MOOOVOVOEOE:  c7c5
MOOOVOVOEOEaaaa:  34
position:  c7c5
board:  . n b q k b n r
r p . p p p . p
p . . . . . . .
P . p . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
r p . p p p . p
p . . . . . . .
P . p . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  1428 next_s:  . n b q k b n r
r p . p p p . p
p . . . . . . .
P . p . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0 -1  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1  0 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
r p . p p p . p
p . . . . . . .
P . p . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  . n b q k b n r
r p . p p p . p
p . . . . . . .
P . p . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388082ef0>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  0 2 1 4  at:  140
count:  1
inserting:  0 2 2 3  at:  147
count:  2
inserting:  0 2 1 0  at:  136
count:  3
inserting:  0 1 0 0  at:  64
count:  4
inserting:  7 0 7 1  at:  3641
count:  5
inserting:  6 0 5 2  at:  3114
count:  6
inserting:  7 2 7 3  at:  3771
count:  7
inserting:  6 1 6 2  at:  3186
count:  8
inserting:  5 1 5 2  at:  2666
count:  9
inserting:  4 1 4 2  at:  2146
count:  10
inserting:  3 1 3 2  at:  1626
count:  11
inserting:  2 1 2 2  at:  1106
count:  12
inserting:  1 1 1 2  at:  586
count:  13
inserting:  6 1 6 3  at:  3187
count:  14
inserting:  5 1 5 3  at:  2667
count:  15
inserting:  4 1 4 3  at:  2147
count:  16
inserting:  3 1 3 3  at:  1627
count:  17
inserting:  2 1 2 3  at:  1107
count:  18
inserting:  1 1 1 3  at:  587
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00937036]
MCTS.py==>search  returning value of canonical board -v:  [0.00937036]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  3565
ChessGame==>getNextState  param action number:  3565 self.n*self.n:  64
selected action:  6 7 5 5
MOVE:  g8f6
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R
MOOOVOVOEOE:  g8f6
position:  g8f6
board:  . n b q k b . r
r p p p p p . p
p . . . . n . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b . r
r p p p p p . p
p . . . . n . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  3565 next_s:  . n b q k b . r
r p p p p p . p
p . . . . n . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0 -2  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3  0 -4]
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b . r
r p p p p p . p
p . . . . n . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  . n b q k b . r
r p p p p p . p
p . . . . n . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388082e80>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  0 2 1 4  at:  140
count:  1
inserting:  0 2 2 3  at:  147
count:  2
inserting:  0 2 1 0  at:  136
count:  3
inserting:  0 1 0 0  at:  64
count:  4
inserting:  7 0 7 1  at:  3641
count:  5
inserting:  6 0 5 2  at:  3114
count:  6
inserting:  7 2 7 3  at:  3771
count:  7
inserting:  6 1 6 2  at:  3186
count:  8
inserting:  5 1 5 2  at:  2666
count:  9
inserting:  4 1 4 2  at:  2146
count:  10
inserting:  3 1 3 2  at:  1626
count:  11
inserting:  2 1 2 2  at:  1106
count:  12
inserting:  1 1 1 2  at:  586
count:  13
inserting:  6 1 6 3  at:  3187
count:  14
inserting:  5 1 5 3  at:  2667
count:  15
inserting:  4 1 4 3  at:  2147
count:  16
inserting:  3 1 3 3  at:  1627
count:  17
inserting:  2 1 2 3  at:  1107
count:  18
inserting:  1 1 1 3  at:  587
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00717098]
MCTS.py==>search  returning value of canonical board -v:  [0.00717098]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  1429
ChessGame==>getNextState  param action number:  1429 self.n*self.n:  64
selected action:  2 6 2 5
MOVE:  c7c6
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R
MOOOVOVOEOE:  c7c6
MOOOVOVOEOEaaaa:  42
position:  c7c6
board:  . n b q k b n r
r p . p p p . p
p . p . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
r p . p p p . p
p . p . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  1429 next_s:  . n b q k b n r
r p . p p p . p
p . p . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0 -1  0  0  0  0  0
 -4 -1  0 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
r p . p p p . p
p . p . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  . n b q k b n r
r p . p p p . p
p . p . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388059588>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  0 2 1 4  at:  140
count:  1
inserting:  0 2 2 3  at:  147
count:  2
inserting:  0 2 1 0  at:  136
count:  3
inserting:  0 1 0 0  at:  64
count:  4
inserting:  7 0 7 1  at:  3641
count:  5
inserting:  6 0 5 2  at:  3114
count:  6
inserting:  7 2 7 3  at:  3771
count:  7
inserting:  6 1 6 2  at:  3186
count:  8
inserting:  5 1 5 2  at:  2666
count:  9
inserting:  4 1 4 2  at:  2146
count:  10
inserting:  3 1 3 2  at:  1626
count:  11
inserting:  2 1 2 2  at:  1106
count:  12
inserting:  1 1 1 2  at:  586
count:  13
inserting:  6 1 6 3  at:  3187
count:  14
inserting:  5 1 5 3  at:  2667
count:  15
inserting:  4 1 4 3  at:  2147
count:  16
inserting:  3 1 3 3  at:  1627
count:  17
inserting:  2 1 2 3  at:  1107
count:  18
inserting:  1 1 1 3  at:  587
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01380971]
MCTS.py==>search  returning value of canonical board -v:  [0.01380971]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  3581
ChessGame==>getNextState  param action number:  3581 self.n*self.n:  64
selected action:  6 7 7 5
MOVE:  g8h6
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R
MOOOVOVOEOE:  g8h6
position:  g8h6
board:  . n b q k b . r
r p p p p p . p
p . . . . . . n
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b . r
r p p p p p . p
p . . . . . . n
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  3581 next_s:  . n b q k b . r
r p p p p p . p
p . . . . . . n
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0 -2
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3  0 -4]
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b . r
r p p p p p . p
p . . . . . . n
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  . n b q k b . r
r p p p p p . p
p . . . . . . n
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1379b8c898>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  0 2 1 4  at:  140
count:  1
inserting:  0 2 2 3  at:  147
count:  2
inserting:  0 2 1 0  at:  136
count:  3
inserting:  0 1 0 0  at:  64
count:  4
inserting:  7 0 7 1  at:  3641
count:  5
inserting:  6 0 5 2  at:  3114
count:  6
inserting:  7 2 7 3  at:  3771
count:  7
inserting:  6 1 6 2  at:  3186
count:  8
inserting:  5 1 5 2  at:  2666
count:  9
inserting:  4 1 4 2  at:  2146
count:  10
inserting:  3 1 3 2  at:  1626
count:  11
inserting:  2 1 2 2  at:  1106
count:  12
inserting:  1 1 1 2  at:  586
count:  13
inserting:  6 1 6 3  at:  3187
count:  14
inserting:  5 1 5 3  at:  2667
count:  15
inserting:  4 1 4 3  at:  2147
count:  16
inserting:  3 1 3 3  at:  1627
count:  17
inserting:  2 1 2 3  at:  1107
count:  18
inserting:  1 1 1 3  at:  587
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01139221]
MCTS.py==>search  returning value of canonical board -v:  [0.01139221]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  3069
ChessGame==>getNextState  param action number:  3069 self.n*self.n:  64
selected action:  5 7 7 5
MOVE:  f8h6
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R
MOOOVOVOEOE:  f8h6
position:  f8h6
board:  . n b q k . n r
r p p p p p . p
p . . . . . . b
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k . n r
r p p p p p . p
p . . . . . . b
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  3069 next_s:  . n b q k . n r
r p p p p p . p
p . . . . . . b
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0 -3
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6  0 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  . n b q k . n r
r p p p p p . p
p . . . . . . b
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  . n b q k . n r
r p p p p p . p
p . . . . . . b
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1379bac3c8>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  0 2 1 4  at:  140
count:  1
inserting:  0 2 2 3  at:  147
count:  2
inserting:  0 2 1 0  at:  136
count:  3
inserting:  0 1 0 0  at:  64
count:  4
inserting:  7 0 7 1  at:  3641
count:  5
inserting:  6 0 5 2  at:  3114
count:  6
inserting:  7 2 7 3  at:  3771
count:  7
inserting:  6 1 6 2  at:  3186
count:  8
inserting:  5 1 5 2  at:  2666
count:  9
inserting:  4 1 4 2  at:  2146
count:  10
inserting:  3 1 3 2  at:  1626
count:  11
inserting:  2 1 2 2  at:  1106
count:  12
inserting:  1 1 1 2  at:  586
count:  13
inserting:  6 1 6 3  at:  3187
count:  14
inserting:  5 1 5 3  at:  2667
count:  15
inserting:  4 1 4 3  at:  2147
count:  16
inserting:  3 1 3 3  at:  1627
count:  17
inserting:  2 1 2 3  at:  1107
count:  18
inserting:  1 1 1 3  at:  587
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01128686]
MCTS.py==>search  returning value of canonical board -v:  [0.01128686]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  3379
ChessGame==>getNextState  param action number:  3379 self.n*self.n:  64
selected action:  6 4 6 3
MOVE:  g5g4
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R
MOOOVOVOEOE:  g5g4
MOOOVOVOEOEaaaa:  30
position:  g5g4
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . . .
. . . . . . p .
N . . . . . . P
R P P P P P P .
. . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . . .
. . . . . . p .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  3379 next_s:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . . .
. . . . . . p .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0 -1  0  1  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . . .
. . . . . . p .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . . .
. . . . . . p .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1379b8c978>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  0 2 1 4  at:  140
count:  1
inserting:  0 2 2 3  at:  147
count:  2
inserting:  0 2 1 0  at:  136
count:  3
inserting:  0 1 0 0  at:  64
count:  4
inserting:  7 0 7 1  at:  3641
count:  5
inserting:  6 0 5 2  at:  3114
count:  6
inserting:  7 2 6 3  at:  3763
count:  7
inserting:  7 2 7 3  at:  3771
count:  8
inserting:  6 1 6 2  at:  3186
count:  9
inserting:  5 1 5 2  at:  2666
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  5 1 5 3  at:  2667
count:  15
inserting:  4 1 4 3  at:  2147
count:  16
inserting:  3 1 3 3  at:  1627
count:  17
inserting:  2 1 2 3  at:  1107
count:  18
inserting:  1 1 1 3  at:  587
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01159847]
MCTS.py==>search  returning value of canonical board -v:  [0.01159847]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  981
ChessGame==>getNextState  param action number:  981 self.n*self.n:  64
selected action:  1 7 2 5
MOVE:  b8c6
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R
MOOOVOVOEOE:  b8c6
position:  b8c6
board:  . . b q k b n r
r p p p p p . p
p . n . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . . b q k b n r
r p p p p p . p
p . n . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  981 next_s:  . . b q k b n r
r p p p p p . p
p . n . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0 -2  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0  0 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  . . b q k b n r
r p p p p p . p
p . n . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  . . b q k b n r
r p p p p p . p
p . n . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f138803ddd8>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  0 2 1 4  at:  140
count:  1
inserting:  0 2 2 3  at:  147
count:  2
inserting:  0 2 1 0  at:  136
count:  3
inserting:  0 1 0 0  at:  64
count:  4
inserting:  7 0 7 1  at:  3641
count:  5
inserting:  6 0 5 2  at:  3114
count:  6
inserting:  7 2 7 3  at:  3771
count:  7
inserting:  6 1 6 2  at:  3186
count:  8
inserting:  5 1 5 2  at:  2666
count:  9
inserting:  4 1 4 2  at:  2146
count:  10
inserting:  3 1 3 2  at:  1626
count:  11
inserting:  2 1 2 2  at:  1106
count:  12
inserting:  1 1 1 2  at:  586
count:  13
inserting:  6 1 6 3  at:  3187
count:  14
inserting:  5 1 5 3  at:  2667
count:  15
inserting:  4 1 4 3  at:  2147
count:  16
inserting:  3 1 3 3  at:  1627
count:  17
inserting:  2 1 2 3  at:  1107
count:  18
inserting:  1 1 1 3  at:  587
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01592085]
MCTS.py==>search  returning value of canonical board -v:  [0.01592085]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  908
ChessGame==>getNextState  param action number:  908 self.n*self.n:  64
selected action:  1 6 1 4
MOVE:  b7b5
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R
MOOOVOVOEOE:  b7b5
MOOOVOVOEOEaaaa:  33
position:  b7b5
board:  . n b q k b n r
r . p p p p . p
p . . . . . . .
P p . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
r . p p p p . p
p . . . . . . .
P p . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  908 next_s:  . n b q k b n r
r . p p p p . p
p . . . . . . .
P p . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1 -1  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4  0 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
r . p p p p . p
p . . . . . . .
P p . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  . n b q k b n r
r . p p p p . p
p . . . . . . .
P p . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1388039080>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  280
inserting:  0 2 1 4  at:  140
count:  1
inserting:  0 2 2 3  at:  147
count:  2
inserting:  0 2 1 0  at:  136
count:  3
inserting:  0 1 0 0  at:  64
count:  4
inserting:  7 0 7 1  at:  3641
count:  5
inserting:  6 0 5 2  at:  3114
count:  6
inserting:  7 2 7 3  at:  3771
count:  7
inserting:  6 1 6 2  at:  3186
count:  8
inserting:  5 1 5 2  at:  2666
count:  9
inserting:  4 1 4 2  at:  2146
count:  10
inserting:  3 1 3 2  at:  1626
count:  11
inserting:  2 1 2 2  at:  1106
count:  12
inserting:  1 1 1 2  at:  586
count:  13
inserting:  6 1 6 3  at:  3187
count:  14
inserting:  5 1 5 3  at:  2667
count:  15
inserting:  4 1 4 3  at:  2147
count:  16
inserting:  3 1 3 3  at:  1627
count:  17
inserting:  2 1 2 3  at:  1107
count:  18
inserting:  1 1 1 3  at:  587
count:  19
inserting:  0 4 1 5  at:  269
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01361779]
MCTS.py==>search  returning value of canonical board -v:  [0.01361779]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  1948
ChessGame==>getNextState  param action number:  1948 self.n*self.n:  64
selected action:  3 6 3 4
MOVE:  d7d5
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R
MOOOVOVOEOE:  d7d5
MOOOVOVOEOEaaaa:  35
position:  d7d5
board:  . n b q k b n r
r p p . p p . p
p . . . . . . .
P . . p . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
r p p . p p . p
p . . . . . . .
P . . p . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  1948 next_s:  . n b q k b n r
r p p . p p . p
p . . . . . . .
P . . p . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0 -1  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1  0 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
r p p . p p . p
p . . . . . . .
P . . p . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  . n b q k b n r
r p p . p p . p
p . . . . . . .
P . . p . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f138803d0b8>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  0 2 1 4  at:  140
count:  1
inserting:  0 2 2 3  at:  147
count:  2
inserting:  0 2 1 0  at:  136
count:  3
inserting:  0 1 0 0  at:  64
count:  4
inserting:  7 0 7 1  at:  3641
count:  5
inserting:  6 0 5 2  at:  3114
count:  6
inserting:  7 2 7 3  at:  3771
count:  7
inserting:  6 1 6 2  at:  3186
count:  8
inserting:  5 1 5 2  at:  2666
count:  9
inserting:  4 1 4 2  at:  2146
count:  10
inserting:  3 1 3 2  at:  1626
count:  11
inserting:  2 1 2 2  at:  1106
count:  12
inserting:  1 1 1 2  at:  586
count:  13
inserting:  6 1 6 3  at:  3187
count:  14
inserting:  5 1 5 3  at:  2667
count:  15
inserting:  4 1 4 3  at:  2147
count:  16
inserting:  3 1 3 3  at:  1627
count:  17
inserting:  2 1 2 3  at:  1107
count:  18
inserting:  1 1 1 3  at:  587
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.01053136]
MCTS.py==>search  returning value of canonical board -v:  [0.01053136]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  2988
ChessGame==>getNextState  param action number:  2988 self.n*self.n:  64
selected action:  5 6 5 4
MOVE:  f7f5
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R
MOOOVOVOEOE:  f7f5
MOOOVOVOEOEaaaa:  37
position:  f7f5
board:  . n b q k b n r
r p p p p . . p
p . . . . . . .
P . . . . p p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
r p p p p . . p
p . . . . . . .
P . . . . p p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  2988 next_s:  . n b q k b n r
r p p p p . . p
p . . . . . . .
P . . . . p p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0 -1 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1  0  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
r p p p p . . p
p . . . . . . .
P . . . . p p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ChessGame.py==>getValidMoves  parms:  board:  . n b q k b n r
r p p p p . . p
p . . . . . . .
P . . . . p p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  1
ChessGame.py==>getValidMoves  self.getActionSize():  4096
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b:  <chess.ChessLogic.Board object at 0x7f1379bcdd30>
OthelloGame.py==>getValidMoves  Board(in OthelloLogic) Object b.pieces:  [[ 4  2  3  5  6  3  2  4]
 [ 1  1  1  1  1  1  1  1]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [-1 -1 -1 -1 -1 -1 -1 -1]
 [-4 -2 -3 -5 -6 -3 -2 -4]]
ChessGame.py==>getValidMoves  player:  1 legalMoves LENGTH:  266
inserting:  0 2 1 4  at:  140
count:  1
inserting:  0 2 2 3  at:  147
count:  2
inserting:  0 2 1 0  at:  136
count:  3
inserting:  0 1 0 0  at:  64
count:  4
inserting:  7 0 7 1  at:  3641
count:  5
inserting:  6 0 5 2  at:  3114
count:  6
inserting:  7 2 7 3  at:  3771
count:  7
inserting:  6 1 6 2  at:  3186
count:  8
inserting:  5 1 5 2  at:  2666
count:  9
inserting:  4 1 4 2  at:  2146
count:  10
inserting:  3 1 3 2  at:  1626
count:  11
inserting:  2 1 2 2  at:  1106
count:  12
inserting:  1 1 1 2  at:  586
count:  13
inserting:  6 1 6 3  at:  3187
count:  14
inserting:  5 1 5 3  at:  2667
count:  15
inserting:  4 1 4 3  at:  2147
count:  16
inserting:  3 1 3 3  at:  1627
count:  17
inserting:  2 1 2 3  at:  1107
count:  18
inserting:  1 1 1 3  at:  587
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
MCTS.py==>search  returning value of canonical board -v:  [-0.00987316]
MCTS.py==>search  returning value of canonical board -v:  [0.00987316]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>getActionProb self.game.stringRepresentation(canonicalBoard)  s:  [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
 -4 -1 -1 -1 -1 -1  0 -1  0 -2 -3 -5 -6 -3 -2 -4]
Coach.py ==>executeEpisode  action:  391
ChessGame==>getNextState  param action number:  391 self.n*self.n:  64
selected action:  0 6 0 7
MOVE:  a7a8
board:  . n b q k b n r
r p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R
MOOOVOVOEOE:  a7a8
position:  a7a8
board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R
FINAL SELECTED MOVE NEW BOARD:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  1
Coach.py ==>executeEpisode  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R self.curPlayer:  1
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  1
Coach.py ==>executeEpisode  canonicalBoard:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>search  self.Es[s]:  0
a:  64
ChessGame==>getNextState  param action number:  64 self.n*self.n:  64
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R player:  -1
MCTS.py==>search  best_act:  64 next_s:  r n b q k b n r
. p p p p p . p
p . . . . . . .
P . . . . . p .
. . . . . . . .
N . . . . . . P
R P P P P P P .
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  4  1  1  1  1  1  1  0  2  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
